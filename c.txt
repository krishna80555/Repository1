using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.IO;
using Firebase.Storage;
using System.Diagnostics;

namespace UI_test_cross_platform
{
    public class Connection
    {
        public static string GOOGLE_BACKEND_DOWN = "The server encountered a temporary error and could not complete your request";
        public enum OfferResponse { ACCEPT, REJECT };

        public static string hostname = "https://theoffertesting.wl.r.appspot.com";
        static string newhostname = "https://theoffertesting.wl.r.appspot.com";

        //public static string hostname = "https://theofferv2.appspot.com";
        //static string newhostname = "https://theofferv2.appspot.com";

        //addes by krishna on 07-03-18
        public static async Task<string> RegisterAsync(string fcm, string fname, string lname, string email, string password, string phone, string loginToken)
        {
            string url = hostname + "/register";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("notification_key", UI_test_cross_platform.CommonUtility.getFcmToken()),
                new KeyValuePair<string, string>("notification_provider", CommonUtility.getNotificationProvider().ToString()),
                new KeyValuePair<string, string>("firstname", fname),
                new KeyValuePair<string, string>("lastname", lname),
                new KeyValuePair<string, string>("phone_nr", phone),
                new KeyValuePair<string, string>("email", email),
                new KeyValuePair<string, string>("password", password),
                new KeyValuePair<string, string>("login_token",loginToken),
                new KeyValuePair<string, string>("device","mobile")

            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string uid = await responseContent.ReadAsStringAsync();
            //Console.WriteLine(" creted user is "+uid);
            return uid;
        }

        //added by Hayk 11-28-18
        public static async Task<string> UpdateDeviceTokenAsync()
        {
            string url = hostname + "/UpdateDeviceToken";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("notification_key", UI_test_cross_platform.CommonUtility.getFcmToken()),
                new KeyValuePair<string, string>("notification_provider", CommonUtility.getNotificationProvider().ToString()),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string status = await responseContent.ReadAsStringAsync();
            return status;
        }
        public static async Task<string> ResendRegistrationAsync(string to_uid,string mobile)
        {
            string url_params = "?" + "&uid=" + to_uid + "&device=" + mobile;
            string url = newhostname + "/web/resendregistration" + url_params;
            var client = new HttpClient();
            var response = await client.GetAsync(url);
            var responseContent = response.Content;
            var stringResponse = await responseContent.ReadAsStringAsync();
            Console.WriteLine("resendregistration response is " + stringResponse);
            return stringResponse;
        }
        public static async Task<string> VerifyRegistrationAsync(string to_uid, string token)
        {
            string url_params = "?" + "&uid=" + to_uid + "&token=" + token;
            string url = newhostname + "/web/verifyregistration" + url_params;
            var client = new HttpClient();
            var response = await client.GetAsync(url);
            var responseContent = response.Content;
            var stringResponse = await responseContent.ReadAsStringAsync();
            Console.WriteLine("verifyregistration response is " + stringResponse);
            return stringResponse;
        }
        //addes by krishna on 26-03-18 
        //modified on 15-11 by krishna
        public static async Task<string> LoginAsync(string email, string password, string loginToken)
        {
            try
            {
                Stopwatch sw = Stopwatch.StartNew();

                string url = hostname + "/login";
                var client = new HttpClient();
                var formContent = new FormUrlEncodedContent(new[]
                {
                new KeyValuePair<string, string>("notification_key", UI_test_cross_platform.CommonUtility.getFcmToken()),
                new KeyValuePair<string, string>("notification_provider", CommonUtility.getNotificationProvider().ToString()),
                new KeyValuePair<string, string>("login_token",loginToken),//added on 16-11
                new KeyValuePair<string, string>("email", email),
                new KeyValuePair<string, string>("password", password)
            });

                var response = await client.PostAsync(url, formContent);
                var responseContent = response.Content;
                string loginRes = await responseContent.ReadAsStringAsync();
                // Console.WriteLine(loginRes);
                sw.Stop();
                Console.WriteLine("Time taken: {0}ms for user login is : ", sw.Elapsed.TotalMilliseconds);
                return loginRes;
            }
            catch(Exception e){
                return "";
            }

        }

        public static async Task<string> LogoutAsync(string uid, string loginToken)
        {
            Stopwatch sw = Stopwatch.StartNew();

            string url = hostname + "/logout";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("login_token",loginToken),//added on 16-11
                new KeyValuePair<string, string>("uid", uid)
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string loginRes = await responseContent.ReadAsStringAsync();
            // Console.WriteLine(loginRes);
            sw.Stop();
            Console.WriteLine("Time taken: {0}ms for manual logout. result: {1}", sw.Elapsed.TotalMilliseconds, loginRes);

            return loginRes;
        }

        //addes by krishna on 26-03-18
        public static async Task<string> UpdateProfileAsync(string fname, string lname, string username, string email, string phone, string gender, 
                                                            long bday, string country, string state, string city,string bio,string interests)
        {
            // Stopwatch sw = Stopwatch.StartNew();

            string url = hostname + "/UpdateProfile";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("firstname", fname),
                new KeyValuePair<string, string>("lastname", lname),
                new KeyValuePair<string, string>("username", username),
                new KeyValuePair<string, string>("email", email),
                new KeyValuePair<string, string>("phone_nr", phone),
                new KeyValuePair<string, string>("gender", gender),
                new KeyValuePair<string, string>("birthday",bday.ToString()), //((DateTimeOffset)bday).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("country", country),
                new KeyValuePair<string, string>("state", state),
                new KeyValuePair<string, string>("city", city),
                new KeyValuePair<string, string>("bio", bio),
                new KeyValuePair<string, string>("interests", interests),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),//added on 16-11
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string loginRes = await responseContent.ReadAsStringAsync();
            Console.WriteLine("response is " + loginRes);
            return loginRes;
        }
        public static async Task<string> UpdateWhoCanChangeResponseAsync(string offer_recipients_can_change_response)
        {
            string url = hostname + "/UpdateProfile";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("offer_recipients_can_change_response", offer_recipients_can_change_response),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("UpdateWhoCanChangeResponseAsync is " + res);
            return res;
        }
        public static async Task<string> UpdateSendEmailAsWellAsync(string offer_send_to_email)
        {
            string url = hostname + "/UpdateProfile";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("offer_send_to_email", offer_send_to_email),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("UpdateSendEmailAsWellAsync is " + res);
            return res;
        }

        public static async Task<string> extendOfferAsync(Offer offer,String offer_id)
        {
            string url = hostname + "/EditOffer";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("exp", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("expiration", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("max_accepted", offer.max_users.ToString()),   
                new KeyValuePair<string, string>("offer_id",offer_id),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("extendOfferAsync is " + res);
            return res;
        }

        public static async Task<string> activateOfferLink(String offer_id,String choice)
        {
            string url = hostname + "/EditOffer";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("sender", Settings.getUID()),
                new KeyValuePair<string, string>("offer_id",offer_id),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),
                new KeyValuePair<string, string>("anyone_can_respond",choice)
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("extendOfferAsync is " + res);
            return res;
        }
        public static async Task<string> UpdateViewRepliesAsync(string viewreplies)
        {
            string url = hostname + "/UpdateProfile";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("offer_who_can_view_guestlists_and_comments", viewreplies),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("UpdateViewRepliesAsync is " + res);
            return res;
        }
        //addes by krishna on 26-03-18
        public static async Task<string> SetPrivacyAsync(string email, string phone, string gender,
                                                            string bday, string country, string state, string city)
        {
            // Stopwatch sw = Stopwatch.StartNew();

            string url = hostname + "/SetPrivacy";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("email", email),
                new KeyValuePair<string, string>("phone_nr", phone),
                new KeyValuePair<string, string>("gender", gender),
                new KeyValuePair<string, string>("birthday",bday), //((DateTimeOffset)bday).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("country", country),
                new KeyValuePair<string, string>("state", state),
                new KeyValuePair<string, string>("city", city),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),//added on 16-11
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string loginRes = await responseContent.ReadAsStringAsync();
            Console.WriteLine("SetPrivacy is " + loginRes);
            return loginRes;
        }

        public static async Task<JsonHelper.CreateOfferResponse> CreateNewOffer(Offer offer, string gids,
            string recipents, string recipents_emails,string recipents_email_listid,string sendOfferToMe,string send_to_email)
        {
            Console.WriteLine("sendOfferToMe " + sendOfferToMe);
            try
            {
                string url = newhostname + "/new";
                var client = new HttpClient();

                //string recipents = CommonUtility.getRecipents(offer.recipents);
                var formContent = new FormUrlEncodedContent(new[]
                {
                new KeyValuePair<string, string>("sender", Settings.getUID()),
                new KeyValuePair<string, string>("title", offer.title),
                new KeyValuePair<string, string>("content", offer.message),
                new KeyValuePair<string, string>("msg", offer.message),
                new KeyValuePair<string, string>("exp", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("expiration", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_date", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("eventDate", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_address", offer.location),//eventAddress
                new KeyValuePair<string, string>("max_accepted", offer.max_users.ToString()),
                new KeyValuePair<string, string>("recipents", recipents),
                new KeyValuePair<string, string>("viewable", offer.viewable.ToString()),
                new KeyValuePair<string, string>("type", offer.type.ToString()),
                new KeyValuePair<string, string>("offer_expire_at_time", offer.offer_expire_at_time),
                new KeyValuePair<string, string>("offer_expire_before_number_of_days", offer.offer_expire_before_number_of_days.ToString()),
                new KeyValuePair<string, string>("event_on_every", offer.event_on_every),
                new KeyValuePair<string, string>("event_on_every_at_time", offer.event_on_every_at_time),
                new KeyValuePair<string, string>("sendoffer_at_time", offer.sendoffer_at_time),
                new KeyValuePair<string, string>("sendoffer_before_number_of_days", offer.sendoffer_before_number_of_days.ToString()),
                new KeyValuePair<string, string>("advoffer_sendofferdate",  ((DateTimeOffset)offer.advoffer_sendofferdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),
                new KeyValuePair<string, string>("group_id",gids),
                new KeyValuePair<string, string>("accepters",0.ToString()),
                new KeyValuePair<string, string>("photo_url",offer.photo_url),
                new KeyValuePair<string, string>("recipents_uids", recipents),
                new KeyValuePair<string, string>("recipents_emails", recipents_emails),
                new KeyValuePair<string, string>("recipents_email_listid", recipents_email_listid),
                new KeyValuePair<string, string>("send_to_myself", sendOfferToMe),

                new KeyValuePair<string, string>("send_to_email", offer.send_to_email.ToString()),
                new KeyValuePair<string, string>("recipients_can_change_response", offer.recipients_can_change_response.ToString()),
                new KeyValuePair<string, string>("make_these_default_advanced_settings", offer.make_these_default_advanced_settings.ToString())
                });
                var response = await client.PostAsync(url, formContent);
                var responseContent = response.Content;
                string r = await responseContent.ReadAsStringAsync();
                Console.WriteLine("new offer creation response is " + r);
                JsonHelper.CreateOfferResponse responseJSON = JsonHelper.parseCreateOfferResponse(r);

                return responseJSON;
            }
            catch (Exception e)
            {
                Console.WriteLine("new offer error is " + e.Message);
                return null;
            }

        }

        public static async Task<String> EditOffer(Offer offer,String offer_id)
        {
            try
            {
                string url = newhostname + "/EditOffer";
                var client = new HttpClient();
                var formContent = new FormUrlEncodedContent(new[]
                {
                new KeyValuePair<string, string>("sender", Settings.getUID()),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("title", offer.title),
                new KeyValuePair<string, string>("content", offer.message),
                new KeyValuePair<string, string>("msg", offer.message),
                new KeyValuePair<string, string>("exp", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("expiration", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_date", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("eventDate", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_address", offer.location),//eventAddress
                new KeyValuePair<string, string>("max_accepted", offer.max_users.ToString()),
                new KeyValuePair<string, string>("viewable", offer.viewable.ToString()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),
                new KeyValuePair<string, string>("photo_url",offer.photo_url),
                new KeyValuePair<string, string>("send_to_myself", offer.send_to_myself.ToString()),
                new KeyValuePair<string, string>("send_to_email", offer.send_to_email.ToString()),
                new KeyValuePair<string, string>("recipients_can_change_response", offer.recipients_can_change_response.ToString()),
                new KeyValuePair<string, string>("make_these_default_advanced_settings", offer.make_these_default_advanced_settings.ToString()),
                new KeyValuePair<string, string>("offer_id", offer_id)
                });
                var response = await client.PostAsync(url, formContent);
                var responseContent = response.Content;
                string r = await responseContent.ReadAsStringAsync();
                Console.WriteLine("edit offer response is " + r);
                return r;
            }
            catch (Exception e)
            {
                Console.WriteLine("edit offer error is " + e.Message);
                return null;
            }

        }

        public static async Task<String> EditOfferSetings(Offer offer, String offer_id)
        {
            try
            {
                string url = newhostname + "/EditOffer";
                var client = new HttpClient();
                var formContent = new FormUrlEncodedContent(new[]
                {
                new KeyValuePair<string, string>("sender", Settings.getUID()),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("exp", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("expiration", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                //new KeyValuePair<string, string>("event_address", offer.location),//eventAddress
                new KeyValuePair<string, string>("max_accepted", offer.max_users.ToString()),
                new KeyValuePair<string, string>("viewable", offer.viewable.ToString()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),
                //new KeyValuePair<string, string>("photo_url",offer.photo_url),
                new KeyValuePair<string, string>("send_to_myself", offer.send_to_myself.ToString()),
                new KeyValuePair<string, string>("send_to_email", offer.send_to_email.ToString()),
                new KeyValuePair<string, string>("recipients_can_change_response", offer.recipients_can_change_response.ToString()),
                new KeyValuePair<string, string>("make_these_default_advanced_settings", offer.make_these_default_advanced_settings.ToString()),
                new KeyValuePair<string, string>("offer_id", offer_id)
                });
                var response = await client.PostAsync(url, formContent);
                var responseContent = response.Content;
                string r = await responseContent.ReadAsStringAsync();
                Console.WriteLine("edit offer settings response is " + r);
                return r;
            }
            catch (Exception e)
            {
                Console.WriteLine("edit offer settings error is " + e.Message);
                return null;
            }

        }


        public static async Task<String> EditOfferDetail(Offer offer, String offer_id)
        {
            try
            {
                string url = newhostname + "/EditOffer";
                var client = new HttpClient();
                var formContent = new FormUrlEncodedContent(new[]
                {
                new KeyValuePair<string, string>("sender", Settings.getUID()),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("title", offer.title),
                new KeyValuePair<string, string>("content", offer.message),
                new KeyValuePair<string, string>("msg", offer.message),
                new KeyValuePair<string, string>("event_date", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("eventDate", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_address", offer.location),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),
                new KeyValuePair<string, string>("photo_url",offer.photo_url),
                new KeyValuePair<string, string>("offer_id", offer_id)
                });
                var response = await client.PostAsync(url, formContent);
                var responseContent = response.Content;
                string r = await responseContent.ReadAsStringAsync();
                Console.WriteLine("edit offer response is " + r);
                return r;
            }
            catch (Exception e)
            {
                Console.WriteLine("edit offer error is " + e.Message);
                return null;
            }

        }

        public static async Task<JsonHelper.CreateOfferResponse> CreateOffer(Offer offer, string gids, string recipents)
        {
            try
            {
                Stopwatch sw = Stopwatch.StartNew();

                string url = hostname + "/new";
                var client = new HttpClient();

                //string recipents = CommonUtility.getRecipents(offer.recipents);
                var formContent = new FormUrlEncodedContent(new[]
                          {
                new KeyValuePair<string, string>("sender", Settings.getUID()),
                new KeyValuePair<string, string>("title", offer.title),
                new KeyValuePair<string, string>("msg", offer.message),
                new KeyValuePair<string, string>("exp", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_date", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_address", offer.location),
                new KeyValuePair<string, string>("max_accepted", offer.max_users.ToString()),
                new KeyValuePair<string, string>("recipents", recipents),

               // new KeyValuePair<string, string>("type", offer.type.ToString()),
                new KeyValuePair<string, string>("viewable", offer.viewable.ToString()),
                new KeyValuePair<string, string>("type", offer.type.ToString()),
                new KeyValuePair<string, string>("offer_expire_at_time", offer.offer_expire_at_time),
                new KeyValuePair<string, string>("offer_expire_before_number_of_days", offer.offer_expire_before_number_of_days.ToString()),
                new KeyValuePair<string, string>("event_on_every", offer.event_on_every),
                new KeyValuePair<string, string>("event_on_every_at_time", offer.event_on_every_at_time),
                new KeyValuePair<string, string>("sendoffer_at_time", offer.sendoffer_at_time),
                new KeyValuePair<string, string>("sendoffer_before_number_of_days", offer.sendoffer_before_number_of_days.ToString()),
                new KeyValuePair<string, string>("advoffer_sendofferdate",  ((DateTimeOffset)offer.advoffer_sendofferdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),
                new KeyValuePair<string, string>("group_id",gids)
                });
                var response = await client.PostAsync(url, formContent);
                var responseContent = response.Content;
                string r = await responseContent.ReadAsStringAsync();
                Console.WriteLine("offer creation response is " + r);
                JsonHelper.CreateOfferResponse responseJSON = JsonHelper.parseCreateOfferResponse(r);

                sw.Stop();
                Console.WriteLine("Time taken: {0}ms for regular offer creation is : ", sw.Elapsed.TotalMilliseconds);

                return responseJSON;
            }
            catch (Exception e)
            {
                Console.WriteLine("message is " + e.Message);
                return null;
            }

        }
        public static async Task<JsonHelper.CreateOfferResponse> CreateRecurringOffer(Offer offer, string recipents)
        {
            try
            {
                Stopwatch sw = Stopwatch.StartNew();

                string url = hostname + "/new";
                var client = new HttpClient();

                //string recipents = CommonUtility.getRecipents(offer.recipents);

                var formContent = new FormUrlEncodedContent(new[]
                {
                new KeyValuePair<string, string>("sender", Settings.getUID()),
                new KeyValuePair<string, string>("title", offer.title),
                new KeyValuePair<string, string>("msg", offer.message),
                new KeyValuePair<string, string>("exp", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_date", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_address", offer.location),
                new KeyValuePair<string, string>("max_accepted", offer.max_users.ToString()),
                new KeyValuePair<string, string>("recipents", recipents),

                    new KeyValuePair<string, string>("viewable", offer.viewable.ToString()),
                new KeyValuePair<string, string>("type", offer.type.ToString()),
                new KeyValuePair<string, string>("offer_expire_at_time", offer.offer_expire_at_time),
                new KeyValuePair<string, string>("offer_expire_before_number_of_days", offer.offer_expire_before_number_of_days.ToString()),
                new KeyValuePair<string, string>("event_on_every", offer.event_on_every),
                new KeyValuePair<string, string>("event_on_every_at_time", offer.event_on_every_at_time),
                new KeyValuePair<string, string>("sendoffer_at_time", offer.sendoffer_at_time),
                new KeyValuePair<string, string>("sendoffer_before_number_of_days", offer.sendoffer_before_number_of_days.ToString()),
              new KeyValuePair<string, string>("advoffer_sendofferdate",  ((DateTimeOffset)offer.advoffer_sendofferdate).ToUnixTimeMilliseconds().ToString()),
                    new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
                });
                var response = await client.PostAsync(url, formContent);
                var responseContent = response.Content;
                string r = await responseContent.ReadAsStringAsync();
                Console.WriteLine("response is " + r);
                JsonHelper.CreateOfferResponse responseJSON = JsonHelper.parseCreateOfferResponse(r);

                sw.Stop();
                Console.WriteLine("Time taken: {0}ms for recurring offer  creation is : ", sw.Elapsed.TotalMilliseconds);

                return responseJSON;
            }
            catch (Exception e)
            {
                Console.WriteLine("message is " + e.Message);
                return null;
            }
        }
        public static async Task<JsonHelper.CreateOfferResponse> CreateAdvancedOffer(Offer offer, string recipents)
        {
            string url = hostname + "/new";
            var client = new HttpClient();

            //string recipents = CommonUtility.getRecipents(offer.recipents);

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("sender", Settings.getUID()),
                new KeyValuePair<string, string>("title", offer.title),
                new KeyValuePair<string, string>("msg", offer.message),
                new KeyValuePair<string, string>("exp", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_date", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("event_address", offer.location),
                new KeyValuePair<string, string>("max_accepted", offer.max_users.ToString()),
                new KeyValuePair<string, string>("recipents", recipents),
                new KeyValuePair<string, string>("viewable", offer.viewable.ToString()),
                new KeyValuePair<string, string>("type", offer.type.ToString()),
                new KeyValuePair<string, string>("offer_expire_at_time", offer.offer_expire_at_time),
                new KeyValuePair<string, string>("offer_expire_before_number_of_days", offer.offer_expire_before_number_of_days.ToString()),
                new KeyValuePair<string, string>("event_on_every", offer.event_on_every),
                new KeyValuePair<string, string>("event_on_every_at_time", offer.event_on_every_at_time),
                new KeyValuePair<string, string>("sendoffer_at_time", offer.sendoffer_at_time),
                new KeyValuePair<string, string>("sendoffer_before_number_of_days", offer.sendoffer_before_number_of_days.ToString()),
                new KeyValuePair<string, string>("advoffer_sendofferdate",((DateTimeOffset)offer.advoffer_sendofferdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string r = await responseContent.ReadAsStringAsync();
            Console.WriteLine("adv response  " + r);
            JsonHelper.CreateOfferResponse responseJSON = JsonHelper.parseCreateOfferResponse(r);

            return responseJSON;
        }
        public static async Task<JsonHelper.CreateOfferResponse> AppendOffer(Offer offer, string offer_id, string recipents,
            string gids,string recipents_emails, string recipents_email_listid,string sendOfferToMe,string send_to_email)
        {
            //Stopwatch sw = Stopwatch.StartNew();
            Console.WriteLine("in append offer");
            string url = hostname + "/append";
            var client = new HttpClient();
            //string recipents = CommonUtility.getRecipents(offer.recipents);

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("offer_key", offer_id),
                new KeyValuePair<string, string>("recipents", recipents),
                new KeyValuePair<string, string>("recipents_uids", recipents),
                new KeyValuePair<string, string>("recipents_emails", recipents_emails),
                new KeyValuePair<string, string>("recipents_email_listid", recipents_email_listid),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),
                new KeyValuePair<string, string>("group_id",gids),
                new KeyValuePair<string, string>("send_to_myself",sendOfferToMe)
                //new KeyValuePair<string, string>("send_to_email",send_to_email)
            });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string r = await responseContent.ReadAsStringAsync();
            Console.WriteLine(" append response  is : " + r);
            JsonHelper.CreateOfferResponse responseJSON = JsonHelper.parseCreateOfferResponse(r);

           // sw.Stop(); 
           

            return responseJSON;
        }   
        public static async Task<string> AddChatMember(string userchat_id, string other_user)
        {
           
            string url = hostname + "/AddUserToUserChat";
            var client = new HttpClient();
            //string recipents = CommonUtility.getRecipents(offer.recipents);

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("other_user", other_user),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),
                new KeyValuePair<string, string>("userchat_id",userchat_id)
            });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string r = await responseContent.ReadAsStringAsync();
            Console.WriteLine("AddUserToUserChat : "+ r);
            return r;
        }

        public static async Task<string> RemoveChatMember(string userchat_id, string other_user)
        {

            string url = hostname + "/RemoveUserFromUserChat";
            var client = new HttpClient();
            //string recipents = CommonUtility.getRecipents(offer.recipents);

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("other_user", other_user),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),
                new KeyValuePair<string, string>("userchat_id",userchat_id)
            });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string r = await responseContent.ReadAsStringAsync();
            Console.WriteLine("RemoveUserFromUserChat : " + r);
            return r;
        }
        public static async Task<string>  AddGroupPhotoAsync(string photo_url, string group_id,string caption)
        {

            string url = hostname + "/AddGroupPhoto";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("photo_url", photo_url),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken()),
                new KeyValuePair<string, string>("group_id",group_id),
                new KeyValuePair<string, string>("description",caption)
            });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string r = await responseContent.ReadAsStringAsync();
            Console.WriteLine("AddGroupPhoto : " + r);
            return r;
        }

        public static async Task<string> DeleteGroupPhotoAsync(string photo_id)
        {
            string url = hostname + "/DeleteGroupPhoto";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("photo_id", photo_id),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string r = await responseContent.ReadAsStringAsync();
            Console.WriteLine("DeleteGroupPhoto : " + r);
            return r;
        }
        public static async Task<string> EditGroupPhotoCaptionAsync(string photo_id,string description)
        {
            string url = hostname + "/EditGroupPhotoDescription";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("photo_id", photo_id),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("description",description),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string r = await responseContent.ReadAsStringAsync();
            Console.WriteLine("DeleteGroupPhoto : " + r);
            return r;
        }
        public static async Task<string> SendVerificationTokenAsync(string phone)
        {
            string url = hostname + "/sendVerificationToken";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("phone", phone)
            });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string r = await responseContent.ReadAsStringAsync();
            Console.WriteLine("sendVerificationToken : " + r);
            return r;
        }
        public static async Task<string> VerifyTokenAsync(string phone,string code)
        {
            string url = hostname + "/verifyToken";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("phone", phone),
                new KeyValuePair<string, string>("code", code)
            });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string r = await responseContent.ReadAsStringAsync();
            Console.WriteLine("verifyToken : " + r);
            return r;
        }
        public static async Task<JsonHelper.ViewOfferStatusResponse> ViewOfferStatus(string offer_id)
        {
            JsonHelper.ViewOfferStatusResponse responseJSON = null;

            try
            {
                string url_params = "?" + "&offer_key=" + offer_id + "&uid=" + Settings.getUID() + "&login_token=" + Settings.getLoginToken();
                string url = hostname + "/view" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                string r = await responseContent.ReadAsStringAsync();
                Console.WriteLine("view offer status response is " + r);
                responseJSON = JsonHelper.parseViewOfferStatusResponse(r);

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);

            }
            return responseJSON;
        }

        public static async Task<string> ViewOfferStatus1(string offer_id)
        {
            string res = "";

            try
            {
                string url_params = "?" + "&offer_key=" + offer_id + "&uid=" + Settings.getUID() + "&login_token=" + Settings.getLoginToken();
                string url = hostname + "/view" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                res = await responseContent.ReadAsStringAsync();
                Console.WriteLine("view offer status1 response is " + res);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);

            }
            return res;
        }

        public static async Task<string> RespondToOffer(string offer_id, string choice)
        {
            var uid = Settings.getUID();
            string url_params = "?" + "&response=" + choice+ "&uid="+ uid + "&offer_id=" + offer_id + "&login_token=" + Settings.getLoginToken();
            string url = hostname + "/web/respondtooffer" + url_params;
            var client = new HttpClient();
            var response = await client.GetAsync(url);
            var responseContent = response.Content;
            var responseString = await responseContent.ReadAsStringAsync();

            //var client = new HttpClient();
            
            //var formContent = new FormUrlEncodedContent(new[]
            //{
            //    new KeyValuePair<string, string>("response", choice),
            //    new KeyValuePair<string, string>("uid", uid),
            //    new KeyValuePair<string, string>("offer_key", offer_id),
            //    new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            //});
            //var response = await client.PostAsync(url, formContent);
            //var responseContent = response.Content;
            //var responseString = await responseContent.ReadAsStringAsync();

            return responseString;
        }
        //for hashed string 
        public static string getHashedPassword(string password)
        {
            Stopwatch sw = Stopwatch.StartNew();

            var crypt = new System.Security.Cryptography.SHA256Managed();
            var hash = new System.Text.StringBuilder();
            byte[] crypto = crypt.ComputeHash(Encoding.UTF8.GetBytes(password));
            foreach (byte theByte in crypto)
            {
                hash.Append(theByte.ToString("x2"));
            }

            sw.Stop();
            Console.WriteLine("Time taken: {0}ms for hashing pwd is : ", sw.Elapsed.TotalMilliseconds);

            return hash.ToString();
        }

        //added by krishna on 26-04-18
        public static async Task<string> CheckUserInstallationAsync(string recipients)
        {
            string stringResponse = "";
            try
            {
                Stopwatch sw = Stopwatch.StartNew();

                string url_params = "?" + "&phone_numbers=" + recipients + "&uid=" + Settings.getUID() + "&login_token=" + Settings.getLoginToken();
                string url = hostname + "/users-installations" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("users-installations is " + stringResponse);
                sw.Stop();
                Console.WriteLine("Time taken: {0}ms for checking user app installation is : ", sw.Elapsed.TotalMilliseconds);

            }
            catch (Exception e)
            {
                Console.WriteLine("response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }
        public static async Task<string> GeAlltMyFriends()
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + Settings.getUID();
                string url = newhostname + "/GetMyFriends" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("get all my friends response is " + stringResponse);
            }
            catch (Exception e)
            {
                Console.WriteLine("response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }



        public static async Task<string> GetMyFriendRequests()
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + Settings.getUID();
                string url = newhostname + "/GetMyFriendRequests" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("get my friends request response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }
        public static async Task<string> GetCommentLikes(string postid)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&comment_id=" + postid;
                string url = newhostname + "/GetCommentLikes" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("get likers response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }
        public static async Task<string> GetGroupJoinRequests(string groupId)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + Settings.getUID() + "&group_id=" + groupId;
                string url = newhostname + "/GetGroupJoinRequests" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("get GetGroupJoinRequests request response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }

        public static async Task<string> GetMyGroups(int reqType)
        {
            Console.WriteLine("GetMyGroups()");
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + Settings.getUID() + "&invite_status=" + reqType;
                string url = newhostname + "/GetMyGroupsIOS" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
               //Console.WriteLine("my  get group response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
          }
        public static async Task<string> GetMyEmailLists()
        {
            string url = newhostname + "/GetMyEmailLists";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string stringResponse = await responseContent.ReadAsStringAsync();
            Console.WriteLine("stringResponse is " + stringResponse);
            return stringResponse;
        }

        public static async Task<string> GetEmailListsOfMyGroups()
        {
            string url = newhostname + "/GetEmailListsOfMyGroups";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string stringResponse = await responseContent.ReadAsStringAsync();
            Console.WriteLine("GetEmailListsOfMyGroups is " + stringResponse);
            return stringResponse;
        }

        public static async Task<string> GetNotificationsAsync(string uid)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + uid;
                string url = newhostname + "/GetNotifications" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("GetNotifications response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("erro is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }

        public static async Task<string> CacelOfferAsync(string offerid)
        {
            string url = hostname + "/CancelOffer";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("offer_id", offerid),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();

            Console.WriteLine("cancel res is " + res);

            return res;
        }
        public static async Task<string> FinishOfferAsync(string offerid)
        {
            string url = hostname + "/FinishOffer";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("offer_id", offerid),
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("finish res is " + res);

            return res;
        }
        //addes by krishna on 27-06-18
        public static async Task<string> UpdatePassword(string password, string email, string phone, int type)
        {
            Stopwatch sw = Stopwatch.StartNew();

            string url = hostname + "/UpdatePassword";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("email", email),//1 email 2 phone
                new KeyValuePair<string, string>("phone", phone),
                new KeyValuePair<string, string>("type", type.ToString()),
                new KeyValuePair<string, string>("password", password),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string uid = await responseContent.ReadAsStringAsync();

            sw.Stop();
            Console.WriteLine("Time taken: {0}ms for updating pwd is : ", sw.Elapsed.TotalMilliseconds);

            // Console.WriteLine(uid);
            return uid;
        }
        //addes by krishna on 27-06-18
        public static async Task<string> AddUserToGroupAsync(string gid, string other_uid)
        {

            string url = hostname + "/AddUserToGroup";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),//1 email 2 phone
                new KeyValuePair<string, string>("other_uid", other_uid),
                new KeyValuePair<string, string>("group_id",gid),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();

            Console.WriteLine("response add member is " + res);
            return res;
        }

        public static async Task<string> RemoveUserFromGroupAsync(string gid, string other_uid)
        {
            string url = hostname + "/RemoveUserFromGroup";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),//1 email 2 phone
                new KeyValuePair<string, string>("remove_uid", other_uid),
                new KeyValuePair<string, string>("group_id",gid),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string uid = await responseContent.ReadAsStringAsync();
            return uid;
        }
        public static async Task<string> RemoveUserFromOfferAsync(string offer_id, string other_uid)
        {
            string url = hostname + "/RemoveUserFromOffer";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("offer_id", offer_id),
                new KeyValuePair<string, string>("other_uid",other_uid),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            return res;
        }

        public static async Task<string> BlockUserFromGroupAsync(string gid, string other_uid)
        {
            string url = hostname + "/BlockUserFromGroup";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),//1 email 2 phone
                new KeyValuePair<string, string>("other_uid", other_uid),
                new KeyValuePair<string, string>("group_id",gid),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("BlockUserFromGroup response is " + res);
            return res;
        }
        public static async Task<string> DeleteUserAsync(string uid)
        {
            string url = hostname + "/DeleteUser";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", uid),//1 email 2 phone
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("delete user response is "+res);
            return res;
        }

        public static async Task<string> GetDeclinedOffers()
        {
            string url_params = "?" + "&uid=" + Settings.getUID() + "&login_token=" + Settings.getLoginToken();
            string url = hostname + "/GetDeclinedOffers" + url_params;
            var client = new HttpClient();
            var response = await client.GetAsync(url);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            return res;
        }


        public static async Task<string> GetAcceptedOffers()
        {
            string url_params = "?" + "&uid=" + Settings.getUID() + "&login_token=" + Settings.getLoginToken();
            string url = hostname + "/GetAcceptedOffers" + url_params;
            var client = new HttpClient();
            var response = await client.GetAsync(url);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            return res;
        }
        public static async Task<string> GetCreatedOffers()
        {
            Stopwatch sw = Stopwatch.StartNew();

            string url_params = "?" + "&uid=" + Settings.getUID() + "&login_token=" + Settings.getLoginToken();
            string url = hostname + "/GetCreatedOffers" + url_params;
            var client = new HttpClient();
            var response = await client.GetAsync(url);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            //Console.WriteLine("created offer response" + res);
            // JsonHelper.ViewOfferStatusResponse responseJSON = JsonHelper.parseViewOfferStatusResponse(r);

            sw.Stop();
            //Console.WriteLine("Time taken: {0}ms for get created offer creation is : ", sw.Elapsed.TotalMilliseconds);

            return res;
        }
        //addes by krishna on 26-03-18
        public static async Task<string> CheckEmailAsync(string email)
        {
            string url = hostname + "/EmailExists";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("email", email),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string loginRes = await responseContent.ReadAsStringAsync();
            return loginRes;
        }
        public static async Task<string> RequestResetPasswordAsync(string email)
        {
            string url = hostname + "/RequestResetPassword";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("email", email),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string loginRes = await responseContent.ReadAsStringAsync();
            return loginRes;
        }
        public static async Task<string> CheckPhoneAsync(string phone)
        {
            Stopwatch sw = Stopwatch.StartNew();

            string url = hostname + "/PhoneExists";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("phone_nr", phone),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            // Console.WriteLine("phone response is " + res);

            sw.Stop();
            Console.WriteLine("Time taken: {0}ms for phone number existence creation is : ", sw.Elapsed.TotalMilliseconds);

            return res;
        }

        public static async Task<string> GetRecievedOffers(string phone_number)
        {
            Stopwatch sw = Stopwatch.StartNew();
            //Console.WriteLine("user id is  " + Settings.getUID()+"=================");
            // Console.WriteLine("login token is "+Settings.getLoginToken());
            string url_params = "?" + "&phone_nr=" + phone_number + "&uid=" + Settings.getUID() + "&login_token=" + Settings.getLoginToken();
            string url = hostname + "/GetRecievedOffers" + url_params;
            var client = new HttpClient();
            var response = await client.GetAsync(url);
            var responseContent = response.Content;
            string r = await responseContent.ReadAsStringAsync();
            //Console.WriteLine("recieved offers " + r);
            //JsonHelper.ViewOfferStatusResponse responseJSON = JsonHelper.parseViewOfferStatusResponse(r);

            sw.Stop();
            //Console.WriteLine("Time taken: {0}ms for get created offer creation is : ", sw.Elapsed.TotalMilliseconds);

            return r;
        }

        public static async Task<string> EditAdvOffer(Offer offer, string offerid, string recipents)
        {
            string url = hostname + "/EditOffer";
            var client = new HttpClient();

            //string recipents = CommonUtility.getRecipents(offer.recipents);

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("offer_id", offerid),
                new KeyValuePair<string, string>("title", offer.title),
                new KeyValuePair<string, string>("content", offer.message),
                new KeyValuePair<string, string>("expiration", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("eventDate", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("eventAddress", offer.location),
                new KeyValuePair<string, string>("max_accepted", offer.max_users.ToString()),
                //new KeyValuePair<string, string>("recipents", recipents)
         new KeyValuePair<string, string>("advoffer_sendofferdate",  ((DateTimeOffset)offer.advoffer_sendofferdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
                });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("res  " + res);
            //JsonHelper.CreateOfferResponse responseJSON = JsonHelper.parseCreateOfferResponse(r);

            return res;
        }
        public static async Task<string> CancelOffer(string offer_id, string timestamp)
        {
            string url = hostname + "/CancelOffer";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),//1 email 2 phone
                new KeyValuePair<string, string>("offer_id", offer_id),
                new KeyValuePair<string, string>("timestamp", timestamp),
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string resp = await responseContent.ReadAsStringAsync();

            Console.WriteLine(resp);
            return resp;
        }

        public static async Task<string> EditRecurringOffer(Offer offer, string offerid, string recipents)
        {

            string url = hostname + "/EditOffer";
            var client = new HttpClient();

            //string recipents = CommonUtility.getRecipents(offer.recipents);

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("offer_id", offerid),
                new KeyValuePair<string, string>("title", offer.title),
                new KeyValuePair<string, string>("content", offer.message),
               // new KeyValuePair<string, string>("expiration", ((DateTimeOffset)offer.expirationdate).ToUnixTimeMilliseconds().ToString()),
               // new KeyValuePair<string, string>("eventDate", ((DateTimeOffset)offer.eventdate).ToUnixTimeMilliseconds().ToString()),
                new KeyValuePair<string, string>("eventAddress", offer.location),
                new KeyValuePair<string, string>("max_accepted", offer.max_users.ToString()),
                //new KeyValuePair<string, string>("recipents", recipents)
               
                new KeyValuePair<string, string>("viewable", offer.viewable.ToString()),
                new KeyValuePair<string, string>("offer_expire_at_time", offer.offer_expire_at_time),
                new KeyValuePair<string, string>("offer_expire_before_number_of_days", offer.offer_expire_before_number_of_days.ToString()),
                new KeyValuePair<string, string>("event_on_every", offer.event_on_every),
                new KeyValuePair<string, string>("event_on_every_at_time", offer.event_on_every_at_time),
                new KeyValuePair<string, string>("sendoffer_at_time", offer.sendoffer_at_time),
                new KeyValuePair<string, string>("sendoffer_before_number_of_days", offer.sendoffer_before_number_of_days.ToString()),
                //new KeyValuePair<string, string>("advoffer_sendofferdate",  ((DateTimeOffset)offer.advoffer_sendofferdate).ToUnixTimeMilliseconds().ToString())
                new KeyValuePair<string, string>("login_token",Settings.getLoginToken())
            });
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("res  " + res);
            //JsonHelper.CreateOfferResponse responseJSON = JsonHelper.parseCreateOfferResponse(r);

            return res;
        }

        public static async Task<string> createGroupAsync(MyGroup mg)
        {
            string url = newhostname + "/CreateGroup";
            var client = new HttpClient();

            //Console.WriteLine("desc is ==== "+mg.group_desc);
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", mg.owner),
                new KeyValuePair<string, string>("title", mg.title),
                new KeyValuePair<string, string>("invite_type", mg.invite_type.ToString()),
                new KeyValuePair<string, string>("invite_code", mg.invite_code.ToString()),
                new KeyValuePair<string, string>("users", mg.users),
                new KeyValuePair<string, string>("member_uids", mg.users),
                new KeyValuePair<string, string>("image_url", mg.image_url),
                new KeyValuePair<string, string>("description", mg.group_desc),//group_desc
                new KeyValuePair<string, string>("email", mg.group_email),
                new KeyValuePair<string, string>("phone", mg.group_phone),
                new KeyValuePair<string, string>("location", mg.group_location)
                //new KeyValuePair<string, string>("group_address",mg.group_address)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("creat group res striing  " + respString);
            return respString;
        }
        public static async Task<string> createSubGroupAsync(string parent_group_id, string title, int invite_type,
        string description)
        {
            string url = newhostname + "/CreateGroup";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("parent_group_id", parent_group_id),
                new KeyValuePair<string, string>("title", title),
                new KeyValuePair<string, string>("invite_type", invite_type.ToString()),
                new KeyValuePair<string, string>("description", description)
            });
            
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("creat sub group res striing  " + respString);
            return respString;
        }

        public static async Task<string> EditSubGroupAsync(string sub_group_id, string title, int invite_type,
        string description)
        {
            string url = newhostname + "/EditGroup";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("group_id", sub_group_id),
                new KeyValuePair<string, string>("title", title),
                new KeyValuePair<string, string>("invite_type", invite_type.ToString()),
                new KeyValuePair<string, string>("description", description)
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("Edit Subgroup group res striing  " + respString);
            return respString;
        }
        public static async Task<string> EditGroupAsync(MyGroup mg)
        {
            string url = newhostname + "/EditGroup";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("group_id",mg.group_id),
                //new KeyValuePair<string, string>("email", email),
                //new KeyValuePair<string, string>("profile_pic", pic),
                //new KeyValuePair<string, string>("description", desc)
                new KeyValuePair<string, string>("title", mg.title),
                new KeyValuePair<string, string>("invite_type", mg.invite_type.ToString()),
                new KeyValuePair<string, string>("invite_code", mg.invite_code.ToString()),
                new KeyValuePair<string, string>("users", mg.users),
                new KeyValuePair<string, string>("profile_pic", mg.image_url),
                new KeyValuePair<string, string>("description", mg.group_desc),
                new KeyValuePair<string, string>("email", mg.group_email),
                new KeyValuePair<string, string>("phone", mg.group_phone),
                new KeyValuePair<string, string>("location", mg.group_location)

            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("edit group res striing  " + respString);
            return respString;
        }
        public static async Task<string> EditGroupChatAsync(string userchat_id, string title, string pic)
        {
            string stringResponse = "";
            try
            {
               
                string url = newhostname + "/EditUserChat";
                var client = new HttpClient();

                var formContent = new FormUrlEncodedContent(new[]
                {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("userchat_id",userchat_id),
                new KeyValuePair<string, string>("title", title),
                new KeyValuePair<string, string>("pic", pic),
              });
                //Console.WriteLine("owner 2 is   " + mg.owner);
                var response = await client.PostAsync(url, formContent);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
            }
            catch (Exception e)
            {
                Console.WriteLine("EditUserChat error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }

        public static async Task<string> MakeMemberToSenderAsync(string all_members_are_senders,string gid)
        {
            string url = newhostname + "/EditGroup";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("group_id",gid),
                new KeyValuePair<string, string>("all_members_are_senders", all_members_are_senders)

            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("MakeMemberToSenderAsync group res striing  " + respString);
            return respString;
        }
        public static async Task<string> AllowMemberToPostToGroupAsync(string allow_members_to_post_to_group, string gid)
        {
            string url = newhostname + "/EditGroup";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("group_id",gid),
                new KeyValuePair<string, string>("allow_members_to_post_to_group", allow_members_to_post_to_group)

            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("AllowMemberToPostToGroupAsync group res striing  " + respString);
            return respString;
        }
        public static async Task<string> MemberAreVisibleToAsync(string members_are_visible_to, string gid)
        {
            string url = newhostname + "/EditGroup";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("group_id",gid),
                new KeyValuePair<string, string>("members_are_visible_to", members_are_visible_to)

            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("MemberAreVisibleToAsync group res striing  " + respString);
            return respString;
        }

        public static async Task<string> AllowMemberToPostPhotosAsync(string allow_members_to_post_photos_to_group, string gid)
        {
            string url = newhostname + "/EditGroup";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("group_id",gid),
                new KeyValuePair<string, string>("allow_members_to_post_photos_to_group", allow_members_to_post_photos_to_group)

            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("AllowMemberToPostPhotosAsync group res striing  " + respString);
            return respString;
        }
        public static async Task<string> RespondToFriendRequestAsync(string requsterPhone, int status)
        {
            string url = newhostname + "/RespondToFriendRequest";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("requested_friend_uid", requsterPhone),
                new KeyValuePair<string, string>("status", status.ToString())
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("respond to friend res striing  " + respString);
            return respString;
        }
        public static async Task<string> RespondToGroupJoinRequestAsync(string gid, string requesteruid, int status)
        {
            string url = newhostname + "/RespondToGroupJoinRequest";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("group_id", gid),
                new KeyValuePair<string, string>("requester_uid", requesteruid),
                new KeyValuePair<string, string>("status", status.ToString())
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("RespondToGroupJoinRequest res striing  " + respString);
            return respString;
        }

        //public static async Task<string> RespondToGroupJoinRequestAsync(string gid,string requesteruid,int status)
        //{
        //    string url = newhostname + "/RespondToGroupJoinRequest";
        //    var client = new HttpClient();

        //    var formContent = new FormUrlEncodedContent(new[]
        //    {
        //        new KeyValuePair<string, string>("uid", Settings.getUID()),
        //        new KeyValuePair<string, string>("group_id", gid),
        //        new KeyValuePair<string, string>("requester_uid",requesteruid),
        //        new KeyValuePair<string, string>("status", status.ToString())
        //    });
        //    //Console.WriteLine("owner 2 is   " + mg.owner);
        //    var response = await client.PostAsync(url, formContent);
        //    var responseContent = response.Content;
        //    string respString = await responseContent.ReadAsStringAsync();
        //    Console.WriteLine("respond to join group res string  " + respString);
        //    return respString;
        //}
        public static async Task<string> JoinGroupAsync(string gid, int status)
        {
            string url = newhostname + "/JoinGroup";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("group_id", gid),
                new KeyValuePair<string, string>("status", status.ToString())
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("join group res string  " + respString);
            return respString;
        }
        public static async Task<string> AddFriendAsync(string requsterPhone)
        {
            string url = newhostname + "/AddFriend";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("requested_friend_uid", requsterPhone)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("add friend res striing  " + respString);
            return respString;
        }
        public static async Task<string> UnFriendAsync(string friend_to_remove_uid)
        {
            string url = newhostname + "/Unfriend";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("friend_to_remove_uid", friend_to_remove_uid)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("un friend res striing  " + respString);
            return respString;
        }

        public static async Task<string> VerifyUserAsync(string other_uid)
        {
            string url = newhostname + "/VerifyUser";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("other_uid", other_uid)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("VerifyUser res striing  " + respString);
            return respString;
        }
        public static async Task<string> UnVerifyUserAsync(string other_uid)
        {
            string url = newhostname + "/UnVerifyUser";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("other_uid", other_uid)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("VerifyUser res striing  " + respString);
            return respString;
        }
        public static async Task<string> BlockUserAsync(string friend_to_block_uid)
        {
            string url = newhostname + "/BlockUser";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("other_uid", friend_to_block_uid)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("block friend res striing  " + respString);
            return respString;
        }
        public static async Task<string> UnBlockUserAsync(string friend_to_unblock_uid)
        {
            string url = newhostname + "/UnBlockUser ";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("other_uid", friend_to_unblock_uid)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("unblock friend res striing  " + respString);
            return respString;
        }

        public static async Task<string> GiveUserRoleAsync(string gid, string otheruid, int role)
        {
            string url = newhostname + "/GiveUserRole";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("other_uid", otheruid),
                new KeyValuePair<string, string>("group_id", gid),
                new KeyValuePair<string, string>("role", role.ToString())
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("leave group res striing  " + respString);
            return respString;
        }
        public static async Task<string> MakeUserOwnerAsync(string gid, string otheruid, int role)
        {
            string url = newhostname + "/MakeUserOwner";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("other_uid", otheruid),
                new KeyValuePair<string, string>("group_id", gid),
                new KeyValuePair<string, string>("role", role.ToString())
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("MakeUserOwner res striing  " + respString);
            return respString;
        }
        public static async Task<string> DeleteGroupAsync(string gid, string uid)
        {
            string url = newhostname + "/DeleteGroup";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", uid),
                new KeyValuePair<string, string>("group_id", gid)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("DeleteGroup group res striing  " + respString);
            return respString;
        }
        public static async Task<string> MoveGroupMemberAsync(string move_member_id, string old_group_id,string new_group_id)
        {
            string url = newhostname + "/MoveGroupMember";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("move_member_id", move_member_id),
                new KeyValuePair<string, string>("old_group_id", old_group_id),
                new KeyValuePair<string, string>("new_group_id", new_group_id)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("MoveGroupMember group res striing  " + respString);
            return respString;
        }
        public static async Task<string> FindUserAsync(string searchText)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&name=" + searchText + "&uid=" + Settings.getUID();
                string url = newhostname + "/FindUser" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("find user response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("find user error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }

        public static async Task<string> FindGroupAsync(string searchText)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + Settings.getUID() + "&name=" + searchText;
                string url = newhostname + "/FindGroup" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("find group response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("find group error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }

        public static async Task<string> PostGroupChatAsync(string gid, string msg, string pid,string photo,int share_with_friends)
        {
            string url = newhostname + "/PostGroupChat";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("groupid", gid),
                new KeyValuePair<string, string>("message", msg),
                new KeyValuePair<string, string>("parent_comment_id", pid),
                new KeyValuePair<string, string>("photo", photo),
                new KeyValuePair<string, string>("share_with_friends", share_with_friends.ToString())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("post chat response is " + res);
            return res;
        }
        public static async Task<string> NewPollAsync(string options, string title)
        {
            string url = newhostname + "/NewPoll";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("options", options),
                new KeyValuePair<string, string>("title", title)
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("NewPoll response is " + res);
            return res;
        }

        public static async Task<string> PostUserChatAsync(string userchat_id, string message,string photo)
        {
            string url = newhostname + "/PostUserChat";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("userchat_id", userchat_id),
                new KeyValuePair<string, string>("message", message),
                new KeyValuePair<string, string>("photo", photo)
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("PostUserChat response is " + res);
            return res;
        }

        public static async Task<string> AddCommentToOfferAsync(string offer_id, string comment)
        {
            string url = newhostname + "/AddCommentToOffer";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("offer_id", offer_id),
                new KeyValuePair<string, string>("comment", comment)
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("AddCommentToOffer response is " + res);
            return res;
        }
        public static async Task<string> EditCommentAsync(string msg, string comment_id)
        {
            string url = newhostname + "/EditComment";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("comment_id", comment_id),
                new KeyValuePair<string, string>("message", msg)
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("EditComment chat response is " + res);
            return res;
        }
        public static async Task<string> DeleteGroupChatAsync(string comment_id)
        {
            string url = newhostname + "/DeleteGroupChat";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("comment_id", comment_id)
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("DeleteGroupChat chat response is " + res);
            return res;
        }
        public static async Task<string> LikeCommentAsync(string post_id, int action)
        {
            string url = newhostname + "/LikeComment";
            var client = new HttpClient();
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("comment_id", post_id),
                new KeyValuePair<string, string>("action", action.ToString())
            });

            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string res = await responseContent.ReadAsStringAsync();
            Console.WriteLine("like response is " + res);
            return res;
        }
        public static async Task<string> GetGroupChatAsync(string gid, long timestamp)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&groupid=" + gid + "&last_chat_time=" + timestamp.ToString();
                string url = newhostname + "/GetGroupChat" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("get group chat response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("get group chat error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }
        //public static async Task<string> GetUserChatAsync(string userchat_id)
        //{
        //    string stringResponse = "";
        //    try
        //    {
        //        string url_params = "?" + "&userchat_id=" + userchat_id + "&uid=" + Settings.getUID();
        //        string url = newhostname + "/GetUserChat" + url_params;
        //        var client = new HttpClient();
        //        var response = await client.GetAsync(url);
        //        var responseContent = response.Content;
        //        stringResponse = await responseContent.ReadAsStringAsync();
        //        Console.WriteLine("GetUserChat response is " + stringResponse);

        //    }
        //    catch (Exception e)
        //    {
        //        Console.WriteLine("GetUserChat response is " + e.Message);
        //        stringResponse = "";
        //    }
        //    return stringResponse;
        //}

        public static async Task<string> GetTimeLine(long oldest_timestamp)
        {
            string stringResponse = "";
            try
            {
                string url_params = "";

                if(oldest_timestamp == 0)
                    url_params = "?" + "&uid=" + Settings.getUID();
                else
                    url_params = "?" + "&uid=" + Settings.getUID() + "&oldest_timestamp=" + oldest_timestamp.ToString();

                string url = newhostname + "/GetTimeLine" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("GetTimeLine response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("GetTimeLine error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }
        

        public static async Task<string> GetCommentAsync(string comment_id)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&comment_id=" + comment_id + "&uid=" + Settings.getUID();
                string url = newhostname + "/GetComment" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("get group chat response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("get group chat error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }
        public static async Task<string> GetGroupInfoAsync(string gid)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&group_id=" + gid + "&uid=" + Settings.getUID();
                string url = newhostname + "/GetGroupInfo" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("get group info response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("get group info error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }
        public static async Task<string> GetMyBlocklistAsync(string uid)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + uid;
                string url = newhostname + "/GetMyBlocklist" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("GetMyBlocklist response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("GetMyBlocklist error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }
        public static async Task<string> NewUserChatAsync(string title,string members)
        {
            string url = newhostname + "/NewUserChat";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("title", title),
                new KeyValuePair<string, string>("members", members)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("NewUserChat res striing  " + respString);
            return respString;
        }
        public static async Task<string> AddUserChatPhotoAsync(string chat_id, string pic)
        {
            string url = newhostname + "/AddUserChatPhoto";
            var client = new HttpClient();

            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("uid", Settings.getUID()),
                new KeyValuePair<string, string>("chat_id", chat_id),
                new KeyValuePair<string, string>("pic", pic)
            });
            //Console.WriteLine("owner 2 is   " + mg.owner);
            var response = await client.PostAsync(url, formContent);
            var responseContent = response.Content;
            string respString = await responseContent.ReadAsStringAsync();
            Console.WriteLine("AddUserChatPhoto res striing  " + respString);
            return respString;
        }
        public static async Task<string> GetUserChatAsync(string userchat_id,string uid)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + uid + "&userchat_id=" + userchat_id;
                string url = newhostname + "/GetUserChat" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("GetUserChat response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("GetUserChat error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
         }

        public static async Task<string> GetMyUserChatsAsync(string uid)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + uid;
                string url = newhostname + "/GetMyUserChats" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("GetMyUserChats response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("GetMyUserChats error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }

        public static async Task<string> FindUserChatAsync(string other_user)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + Settings.getUID() + "&other_user=" + other_user;
                string url = newhostname + "/FindUserChat" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("FindUserChat response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("FindUserChat error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }

        public static async Task<string> GetUserProfileAsync(string other_uid)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + Settings.getUID()+ "&other_uid=" + other_uid;
                string url = newhostname + "/GetUserProfile" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("GetUserProfile response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("GetUserProfile error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }

        public static async Task<string> GetPollAsync(string uid,string poll_id)
        {
            string stringResponse = "";
            try
            {
                string url_params = "?" + "&uid=" + uid + "&poll_id=" + poll_id;
                string url = newhostname + "/GetPoll" + url_params;
                var client = new HttpClient();
                var response = await client.GetAsync(url);
                var responseContent = response.Content;
                stringResponse = await responseContent.ReadAsStringAsync();
                Console.WriteLine("GetPoll response is " + stringResponse);

            }
            catch (Exception e)
            {
                Console.WriteLine("GetPoll error response is " + e.Message);
                stringResponse = "";
            }
            return stringResponse;
        }

        public static async Task<string> ReportPost(string resource_id, string resource_type, string reason)
        {
            try
            {
                Stopwatch sw = Stopwatch.StartNew();

                string url = hostname + "/ReportPost";
                var client = new HttpClient();
                var formContent = new FormUrlEncodedContent(new[]
                {
                new KeyValuePair<string, string>("resource_type", resource_type),
                new KeyValuePair<string, string>("resource_id", resource_id),
                new KeyValuePair<string, string>("login_token", Settings.getLoginToken()),//added on 16-11
                new KeyValuePair<string, string>("reason", reason),
                new KeyValuePair<string, string>("uid", Settings.getUID())
            });

                var response = await client.PostAsync(url, formContent);
                var responseContent = response.Content;
                string loginRes = await responseContent.ReadAsStringAsync();
                // Console.WriteLine(loginRes);
                sw.Stop();
                Console.WriteLine("Time taken for ReportPost is : {0}ms ", sw.Elapsed.TotalMilliseconds);
                return loginRes;
            }
            catch (Exception e)
            {
                return "";
            }

        }

    }
}
