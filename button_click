Ext.onReady(function(){ 
	var searchText='';
	var searchedColumn='';
	var myMask=null;
	var uploadForm=null;
	var uploadFormWindow=null;
	var row_id_count=-0;
	var scriptWindow=null;
	var selected_db_for_script='';
	var selected_schema_for_script='';
	var excellActionDS = Ext.create('Ext.data.Store',{
 		 fields: ['action_name','action_value'],
 		 data: [['Upload Excell','UE'],['Load CSV','UCSV'],['Export To Excell','EEX'],['Download Template','DT']]
 	}); 
	var excellActionCombo=Ext.create('Ext.form.ComboBox',{
		    fieldLabel:"Excell",
			typeAhead : true,
			triggerAction : 'all',
			store:excellActionDS,
			valueField : 'action_value',        
			displayField :'action_name',
			queryMode : 'local',
			editable:false,
			triggerAction : 'all',
			typeAhead : true,
			lazyRender : true,       									
		    selectOnFocus : true,
			hiddenName:'role',
			name:'role',
			anchor:'100%',
			labelWidth:40,
			width:150,
			forceSelection:true,
			listConfig: {
               loadingText:'Loading..',
				minWidth: 150,
				resizable:true,
				resizeHandles:'e'
           }
     });
	excellActionCombo.on('select',function(combo, record, index) { 
		var actionVal=combo.getValue();
		if(sf_db_name ==undefined || sf_db_name ==''){
			 Ext.MessageBox.alert(errorText,'Please select a database');
			 excellActionCombo.setValue('');
			 excellActionCombo.setRawValue('');
		}
		else if(tableName ==undefined || tableName ==''){
			 Ext.MessageBox.alert(errorText,'Please select a table');
			 excellActionCombo.setValue('');
			 excellActionCombo.setRawValue('');
		}
		else{
			if(actionVal == 'UE'){
				showUploadWindow('UPLOAD_EXCELL');
			}
			else if(actionVal == 'UCSV'){
				showUploadWindow('LOAD_CSV');
			}
			else if(actionVal == 'DT'){
				excellActionCombo.setValue('');
				excellActionCombo.setRawValue('');
				window.open('sfimportupload?req=generateTemplate&tblName='+tableName+'&fields='+columnsfields.join()+'&dbName='+sf_db_name+'&schema='+selectedSchema+'&wh='+selectedWH,'mywindow','width=400,height=200,scrollbars=yes,resizable=yes');
			}
			else if(actionVal == 'EEX'){
				excellActionCombo.setValue('');
				excellActionCombo.setRawValue('');
				window.open('sfimportupload?req=exportToExcell&tblName='+tableName+'&fields='+columnsfields.join()+'&dbName='+sf_db_name+'&schema='+selectedSchema+'&wh='+selectedWH,'mywindow','width=400,height=200,scrollbars=yes,resizable=yes');
			}
		}
	});
	//var myMask= new Ext.LoadMask(dynamicGrid, {msg:"Loading..."});
	var runner = new Ext.util.TaskRunner();
	Ext.define('EF_Error_Model', {
		extend: 'Ext.data.Model',
		fields: [
		           //the "name" below matches the tag name to read
		           {name: 'ef_row_id', type: 'string'},
		           {name: 'ef_err_msg', type: 'string'}
	    ]});
	
	function displayErroPopupWindow(){
			var errorGrid = Ext.create('Ext.grid.Panel',{
			store : sferrorStore,
			columns: [{
				header : "Row Id",
				dataIndex : 'ef_row_id',
				width : 100
				},
				{
					header : "Error Message",
					dataIndex : 'ef_err_msg',
					width : 300
				}
			],
			width : 500,
			selModel:{
			selType:'rowmodel'
			},
			height : 300,
			stripeRows : true,
			frame : true,
			border : true,
			scrollable:true
		});
			
		 var errorWindow =Ext.create('Ext.window.Window',{
				title : tableUpdateFailed,
				width : (520),
				height : (320),
				bodyStyle : 'padding:5px;',
				layout : 'column',
				frame : true,
				modal : true,
				minimizable : false,
				resizable:false,
				onEsc : function() {
			    },
				maximizable : false,
				closable : true,
				closeAction : 'close',
				buttonAlign:'center',
 				buttons:[
 					    {
     					 xtype:'button',
     					 text:'Close',
     					 margin:'5px',
     					 handler:function(){
     						errorWindow.destroy();
     					 }
     					}
 				    ],
				close : function() {
					errorWindow.destroy();
				},
				items : [errorGrid]
				});

		 errorWindow.show();
		 errorWindow.center();
	}
	//updating the snowflake tables
	function submitChanges(data ,action,isDisplayWindow) {
			myMask = new Ext.LoadMask({
	            msg    : 'Please wait...',
	            target : dynamicGrid
	        });
	        myMask.show();
	        
	       if(action=="update"){
	       		Ext.Ajax.request({
	            	url:        'sfdata?req=updateData&dbName='+sf_db_name,
		            success:    function(result,request) {
		            	row_id_count=-0;
		            	myMask.hide();
		            	var resp=result.responseText.trim();
		            	
		            	if(resp.includes('SessionExpired')){
		        	    	 window.location.href="login";
		        	    }
		            	else if(resp.includes('Error')){
 	            			msgTextArea.setFieldStyle('color:red');
 	            			msgTextArea.setValue(resp.split('@')[2]);
 	            		}
		            	else{
		            	msgTextArea.setFieldStyle('color:black');
			            var message=resp.split('@');
			            if(message[3] != undefined && message[3] != null && message[3] != '')
		                  msgTextArea.setValue(message[0] +" " +message[1]+" " +message[3].replaceAll('&#039;',"'")+" " +message[4]);
			            else
			            	msgTextArea.setValue(message[0] +" " +message[1]+" "+message[4]);
		                
		                var errorCount=message[1].split(' ');
		                if(parseInt(errorCount[0])> 0){
		                	errorXmlObject=null;
		                	errorXmlObject=message[2];
		                	var domParser = new DOMParser();    
			   	            var xmlDocument = domParser.parseFromString(errorXmlObject, "text/xml");
			   	            
				   	          sferrorStore = Ext.create('Ext.data.Store', {
				   		        model: 'EF_Error_Model',
				   		        data : xmlDocument,
				   		        proxy: {
				   		            type: 'memory',
				   		            reader: {
				   		                type: 'xml',
				   		                record: 'error'
				   		            }
				   		        }
				   		     });
				   	       if(isDisplayWindow)
				   	         displayErroPopupWindow();
		                }
		                else{
		                	clearErrorGridAndStore();
		                }
		                 //searchText='';
		            	 //searchedColumn='';
		                dynamicStore.reload(); 
		              }
	                },
	                failure:function(result,request) {
		   				  myMask.hide();
		   			},
		            params:     { changes: Ext.util.JSON.encode( data ),tblName:tableName,fields:columnsfields.join(),schema:selectedSchema,wh:selectedWH }
		        });
	        }
	       else if(action=="delete"){
	        	Ext.getCmp('deleteData').disable();
	           	Ext.Ajax.request({
	           		url:'sfdata?req=deleteSFRecord',
	   	            success:    function(result,request) {
	   	            	    row_id_count=-0;
	   	                    myMask.hide();
    			            Ext.getCmp('deleteData').enable();
	   	            	    var message=result.responseText.trim();
		   	            	if(message.includes('SessionExpired')){
			        	    	 window.location.href="login";
			        	    }
		   	            	else if(message.includes('Error')){
	 	            			msgTextArea.setFieldStyle('color:red');
	 	            			msgTextArea.setValue(message);
	 	            		}
	 	            		else {
	                          msgTextArea.setValue(message);
	                          dynamicStore.reload(); 
	 	            		}
	   				},
	   				failure:function(result,request) {
		   				  myMask.hide();
	      			      Ext.getCmp('deleteData').enable();
		   			},
	   	            params:     { id:  data,tblName:tableName,dbName:sf_db_name,schema:selectedSchema,wh:selectedWH}
	   	        });
	         }
	    } 
	/*function saveModifiedChanges(data ,action) {
	       		Ext.Ajax.request({
	            	url:        'sfdata?req=updateData&dbName='+sf_db_name,
		            success:    function(result,request) {
		            	//var resp=result.responseText.trim();
		                //dynamicStore.reload(); 
	                },
		            params:     { changes: Ext.util.JSON.encode( data ),tblName:tableName,fields:columnsfields.join(),schema:selectedSchema,wh:selectedWH }
		        });
	       
	    } */
      //db model
	  Ext.define('DatabaseModel', {
				extend: 'Ext.data.Model',
				idProperty : 'dbName',
				fields: [
						  {name: 'dbName', type: 'string'}
     				]});
	 //db store
     var dbDS = Ext.create('Ext.data.Store', {
	        model: 'DatabaseModel',
	        pageSize:50,
	        autoLoad:false,
	        proxy:{
			type: 'ajax',
            url:'sfdata?req=getDBsName&dbName='+sf_db_name+'&wh='+selectedWH,
	        reader:{
			           type:'xml',
					   record: 'db'
		          }
			},
            listeners:{
            	load:function(store, records, successful, eOpts){
            		if(!successful){
	        	    	 window.location.href="login";
	        	    }
            		else if(store.getCount() > 0){
            			 var error=store.getAt(0).get('dbName');
 	                     if(error.includes('Error')){
 	            		    store.removeAll();
 	            			msgTextArea.setFieldStyle('color:red');
 	            			msgTextArea.setValue(error);
 	            		}
 	            		else {
 	            			msgTextArea.setFieldStyle('color:black');
 	            			try{
	            				sf_db_name=error;
	            				dbCombo.setValue(sf_db_name);
	            				dbCombo.setRawValue(sf_db_name);
	            				schemaDS.load();
            				}
            				catch(e){
            					console.log(e);
            				}
 	            		}
            		}
            	},
            	beforeload:function(store){
            		treeStore.getRootNode().removeAll();
            	}
            }
	    });
        //db dropdown
		var	dbCombo = Ext.create('Ext.form.ComboBox',{
		                                typeAhead: true,
             							triggerAction: 'all',
             							store : dbDS,
	      								valueField: 'dbName',        
	      								displayField:'dbName',
	      								queryMode:'local',
	      								emptyText:'Select Database Name',
	     								lazyRender:true,
	     								pageSize:50, 
	     								minChars:0,      									
	          							selectOnFocus:true,
	          							width:150,
	     								listConfig: {
		  	                                loadingText:'Loading..',
											minWidth: 250,
											resizable:true,
											resizeHandles:'e'
	                                    }
	                           });
	  
	   /* dbDS.add({dbName : dbName});
		dbCombo.setValue(dbName);
		dbCombo.setRawValue(dbName);*/
		
		dbCombo.on('select',function(combo, record, index) { 
			sf_db_name = dbCombo.getValue();
			//schemaCombo.setValue('');
        	//schemaCombo.setRawValue('');
        	//selectedSchema='PUBLIC';
        	//schemaCombo.setValue(selectedSchema);
        	//schemaCombo.setRawValue(selectedSchema);
			//console.log('selected dbName '+sf_db_name);
			dynamicStore.removeAll();
			schemaDS.load();
			//treeStore.load();
			
		});
		dbCombo.on('blur',function(combo,event, eOpts ){
			dbCombo.setValue(sf_db_name);
			dbCombo.setRawValue(sf_db_name);
			/*schemaCombo.setValue('');
        	schemaCombo.setRawValue('');
        	selectedSchema='PUBLIC';
        	schemaCombo.setValue(selectedSchema);
        	schemaCombo.setRawValue(selectedSchema);*/
		});
         
		whCombo.on('select',function(combo, record, index) {
			var wh=whCombo.getRawValue();
			if(!isDefaultWHSet){
				Ext.Msg.show({
				    title:'Alert',
	   				msg: 'Do you want to make this '+wh +' warehouse as default one?',
	   				buttons: Ext.MessageBox.YESNO,   
						fn: function(btn,val){ 
							if(btn =='yes'){
								Ext.Ajax.request({
					            	url:        'sfconfiguration?req=setDefaultWH&wh='+wh,
						            success:    function(result,request) {
							            var message=result.responseText.trim();
							            if(message.includes('Error')){
				 	            			msgTextArea.setFieldStyle('color:red');
				 	            			msgTextArea.setValue(message);
				 	            		}
							            else{
							            	msgTextArea.setFieldStyle('color:black');
								            isDefaultWHSet=true;
							                msgTextArea.setValue(message);
							                selectedWH=wh;
							                enableDisableBtn(true);
							                selectedSchema='';
									    	schemaDS.add({schemaName : selectedSchema});
											schemaCombo.setValue(selectedSchema);
										    schemaCombo.setRawValue(selectedSchema);
							                dbDS.load();
						              }
					                },
						            params:     {}
						        });
			                  }
						   else{
							   selectedWH=wh;
							   isDefaultWHSet=false;
							   enableDisableBtn(true);
							   selectedSchema='';
						       schemaDS.add({schemaName : selectedSchema});
							   schemaCombo.setValue(selectedSchema);
							   schemaCombo.setRawValue(selectedSchema);
							   dbDS.load();
							}
			   		},
			   		animEl: 'elId'
				});
			}
			else{
				selectedWH=wh;
				enableDisableBtn(true);
				dbDS.load();
			}
	  });

		connectionNameCombo.on('select',function(combo, record, index) {
			//console.log('connection selected')
			var conname=combo.getRawValue();
			var database_type=combo.getValue();
			console.log('connection selected==='+database_type);
			if(database_type == 'MySql' || database_type == 'MYSQL'){
				window.location.href="mysql_main?dbType="+database_type+"&connectionName="+conname;
			}
			else{
			Ext.Ajax.request({
	      	        url:'sfconfiguration?req=getSFConectionDetails',
		             success:function(result,request) {
		            	 var resp=result.responseText.trim();
		            	 if(resp == '' || resp == null || resp =='null' || resp == undefined){
		            		 Ext.MessageBox.alert('Error ',"Connection with name "+conname+" not found");
		            	  }
		            	 else if(resp.includes('Error')){
		            		 msgTextArea.setFieldStyle('color:red');
		            		 msgTextArea.setValue(resp);
		            	 }
		            	  else{
		            		msgTextArea.setFieldStyle('color:black');
		            		var response=resp.split(',')
		            	    selectedWH='';
			         	    whCombo.setValue(selectedWH);
					    	whCombo.setRawValue(selectedWH);
			         	    SFWHDS.removeAll();
			         	    
			         	   sf_db_name='';
           				   dbCombo.setValue(sf_db_name);
           				   dbCombo.setRawValue(sf_db_name);
			         	   dbDS.removeAll();
			         	   treeStore.getRootNode().removeAll();
			         	   
			         	    selectedSchema='';
						    schemaCombo.setValue(selectedSchema);
							schemaCombo.setRawValue(selectedSchema);
							schemaDS.removeAll();
							
							columnCombo.setValue('');
							columnCombo.setRawValue('');
							columnsDS.removeAll();
		            	 
							  searchText='';
					    	  searchedColumn='';
					    	  searchBox.setValue('');
					    	  dynamicStore.removeAll();
					    	  
		            	 //console.log('resp :'+resp);
			             conn_name=conname;
			      	     user_name=response[1];
			      	     url=response[0];
			      	     role=response[2];
			      	     selectedWH=response[3];
		         		connectionNameCombo.setValue(conname);
		         		connectionNameCombo.setRawValue(conname);
		         		//Ext.getCmp('url_name').update(url);
		         		//Ext.getCmp('user').update(user_name);
		         		//Ext.getCmp('role').update(role);
		         		
		         		//console.log('role :'+role);
		         		
		         		Ext.getCmp('sf_url').update('<a href="https://'+url+'" target=_blank class="sf_url_style">'+ url +'</a>');
		         		Ext.getCmp('sf_user').update(user_name);
		         		Ext.getCmp('sf_role').update('<font style="font-weight:bold;font-size:11px;">'+role+'</font>');
		         		//sf_user.innerHTML='';
		         		//sf_role.innerHTML='';
		         		
		         		Ext.suspendLayouts();
		         	    Ext.resumeLayouts(true);
		         	    /*selectedWH='';
		         	    whCombo.setValue(selectedWH);
				    	whCombo.setRawValue(selectedWH);
		         	    SFWHDS.removeAll();
		         	    SFWHDS.load();
                        console.log(
		         	    dbDS.load();*/
		         	   // console.log('selectedWH '+selectedWH);
		         	   if(selectedWH != null && selectedWH !='null' && selectedWH != undefined && selectedWH != ''){
		         		    enableDisableBtn(true);
		         		    //selectedSchema='';
					    	SFWHDS.add({whName : selectedWH});
					    	whCombo.setValue(selectedWH);
					    	whCombo.setRawValue(selectedWH);
					    	dbDS.load();	
					    	isDefaultWHSet=true;
					    	//schemaDS.add({schemaName : selectedSchema});
							//schemaCombo.setValue(selectedSchema);
						    //schemaCombo.setRawValue(selectedSchema);
					    }
					    else{
						    Ext.MessageBox.alert('Please select a warehouse');
						    enableDisableBtn(false);
						    isDefaultWHSet=false;
					     }
		               }
					 },
		            params: { conname:conname}
		    });
		   }
		});
	//search box 
	var searchBox =  Ext.create('Ext.form.TextField',{
		maxLength : '1000',
		width: '110px',
		emptyText:'Enter the search text'
	 });
	
	searchBox.on('specialkey',function(form,e){ 
		if(e.getKey() == e.ENTER ){ 
			searchText=searchBox.getValue();
			if(searchText != ''){
				clearErrorGridAndStore();
				msgTextArea.setValue("");
				searchedColumn = columnCombo.getValue().toString();
        	    if(searchedColumn==''){
	        		 searchedColumn=columnsfields.join();
	            }
				dynamicStore.loadPage(1);	
			}    
	      }   
	});
	//bottom message area 
	 msgTextArea = Ext.create('Ext.form.TextField',{
		readOnly : true,
		dock: 'bottom',
		minHeight : 15
    });
	 
	
	 var fromField = Ext.create('Ext.form.field.Number',{
			    fieldLabel: 'Start Row',
		        minValue: 0,
		        value: 0,
				maxLength:10,
				pattern :'[0-9]',
				width: '10%',
				labelWidth:60,
				enforceMaxLength:true,
				hideTrigger:true,
				allowDecimals: false,
				allowNegative: false,
	            allowExponential:false
	 });
	   fromField.on('specialkey',function(form,e){ 
			if(e.getKey() == e.ENTER ){
				    clearErrorGridAndStore();
					msgTextArea.setValue("");
					dynamicStore.load(1);	
		      }   
		});
	  
	//bottom message area 
	var toField = Ext.create('Ext.form.field.Number',{
		fieldLabel: 'Page Size',
		minValue: 0,
        value: 300,
		maxLength:5,
		pattern :'[0-9]',
		width: '10%',
		labelWidth: 60,
		enforceMaxLength:true,
		hideTrigger:true,
		allowDecimals: false,
		allowNegative: false,
		allowExponential:false
	 });
	
	 toField.on('specialkey',function(form,e){ 
			if(e.getKey() == e.ENTER ){
				    clearErrorGridAndStore();
					msgTextArea.setValue("");
					dynamicStore.load(1);	
		      }   
	});
	 var autoSaveIntervalBox = Ext.create('Ext.form.field.Number',{
			fieldLabel: autoSaveIntervalLabel,
			minValue: 0,
	        value: autoSaveInterval,
			maxLength:3,
			pattern :'[0-9]',
			labelWidth: 140,
			width: '18%',
			enforceMaxLength:true,
			hideTrigger:true,
			allowDecimals: false,
			allowNegative: false,
			allowExponential:false,
			listeners:{
				 focusleave:function( obj, event, eOpts ){
					 console.log('focused leaved');
				 },
				change: function(obj, newValue, oldValue, eOpts) {
					        if(newValue != 'null'&& newValue != null && newValue != undefined){
					        	console.log('interval chnaged.=='+newValue);
						        autoSaveInterval = newValue;
						        runner.stop(task);
				                task.interval=parseInt(autoSaveInterval)*(60*1000)
				                runner.start(task);
					        }
		       }
			}
		 });
	var enableColumnDetailPopupBtn= {
		 xtype:'checkbox',
         boxLabel  : editPopupLabel,
         name      : 'edit-pop-up',
         width:98,
         id        : 'edit-pop-up',
         checked : true,
         listeners:{
             change: function( radio, newValue, oldValue, eOpts ){
            	 console.log('newValue '+newValue);
            	 if(newValue){
            		 enableColumnDetail=true;
            		 if(sf_db_name ==undefined || sf_db_name ==''){
	        			 //Ext.MessageBox.alert(errorText,'Please select a database');
	        		}
	        		else if(tableName ==undefined || tableName ==''){
	        			 //Ext.MessageBox.alert(errorText,'Please select a table');
	        		}
	        		else{
            		    getTableColumnsName(tableName);
	        		}
            	 }
            	 else{
            		 enableColumnDetail=false;
            		 if(sf_db_name ==undefined || sf_db_name ==''){
	        			 //Ext.MessageBox.alert(errorText,'Please select a database');
	        		}
	        		else if(tableName ==undefined || tableName ==''){
	        			 //Ext.MessageBox.alert(errorText,'Please select a table');
	        		}
	        		else{
            		 getTableColumnsName(tableName);
	        		}
            	 }
            	 /*if(newValue){
            		 enableColumnDetail=true;
            		 getTableColumnsName(tableName);
            	 }
            	 else{
            		 enableColumnDetail=false;
            		 getTableColumnsName(tableName);
            	 }*/
             }
         }
	 }
	   var enableAutoSaveBtn= {
			 xtype:'checkbox',
	         boxLabel  : autoSaveLabel,
	         name      : 'auto-save',
	         width:80,
	         id        : 'auto-save',
	         checked : true,
	         listeners:{
	             change: function( radio, newValue, oldValue, eOpts ){
	            	 console.log('newValue '+newValue);
	            	 if(newValue){
	            		 enableAutoSave=true;
	            		 autoSaveIntervalBox.setDisabled(false);
	            	 }
	            	 else{
	            		 enableAutoSave=false;
	            		 autoSaveIntervalBox.setDisabled(true);
	            	 }
	             }
	         }
		 }
     //paging bar
	 var dynamicPaging=Ext.create('Ext.toolbar.Paging',{
					         store:dynamicStore ,
					         dock:'bottom',
					         displayInfo: true,
					         displayMsg:pagingToolbarDisplayMsg,
					         emptyMsg:pagingToolbarEmptyMsg,
					         doRefresh : function(){
					        	    msgTextArea.setValue('');
					        	    clearErrorGridAndStore();
						        	//dynamicStore.reload(); 
					        	    //dynamicStore.removeAll();
					        	    getTableColumnsName(tableName);
						        	searchText='';
						        	searchedColumn='';
					          }
                    });
     //Cell Editing Plugin
     var dynamicCellEdit=Ext.create('Ext.grid.plugin.CellEditing', { 
						        clicksToMoveEditor: 1,
						        clicksToEdit :1,
						        autoCancel: false
	                        }); 
     //table column dropdown and ds
     //db model
	  Ext.define('ColumnModel', {
				extend: 'Ext.data.Model',
				idProperty : 'columnName',
				fields: [
						  {name: 'columnName', type: 'string'}
      ]});
       var columnsDS = Ext.create('Ext.data.Store',{
    	    model: 'ColumnModel'
		}); 
       
       Ext.define('comboSelectedCount', {
           alias: 'plugin.selectedCount',
           init: function (combo) {
                allSelected = false,
               id = combo.getId() + '-toolbar-panel';

               Ext.apply(combo, {
                   listConfig: {
                       tpl : new Ext.XTemplate(
                           '<div id="' + id + '"></div><tpl for="."><div class="x-boundlist-item">{' + combo.displayField + '}</div></tpl>'
                       ),
                    //emptyText: 'Search Not Found...',
      	             minWidth: 200,
      	             resizable:true,
      	             resizeHandles:'e'
                   }
               });
               var btn=Ext.create('Ext.Component', {
                   html:'<div class="selectall">Select all</div>',
                   listeners: {
               		render: function(c){
               			var el=c.getEl();
               			el.on({
               				click: function(b) {
               					 if( ! allSelected) {
                                        combo.select(combo.getStore().getRange());;
                                        btn.update('<div class="selectall">Deselect All</div>');
                                        allSelected = true;
                                    }else{
                                        combo.reset();
                                        btn.update('<div class="selectall">Select All</div>');
                                        allSelected = false;
                                    }
               					 b.stopEvent();
               				}
               			});
               		}
               	}
               });
              
               combo.on({
                   select: function (me, records) {
                	   
                   },
                   beforedeselect: function (me, record, index) {
                     
                   },
                   expand: {
                       fn: function() {
                           var dropdown = Ext.get(id).dom.parentElement;
                           var container = Ext.DomHelper.insertBefore(dropdown, '<div id="'+id+'-container"></div>', true);
                           btn.render(container);
                       },
                       single: true
                   }
               });
           }
       });
       var	columnCombo=  Ext.create('Ext.form.ComboBox', {
            plugins: ['selectedCount'],
            typeAhead : true,
			triggerAction : 'all',
			store : columnsDS,
			valueField: 'columnName',        
			displayField:'columnName',
			emptyText:'Select a column',
			queryMode: 'local',
			lazyRender : true,
			selectOnFocus : true,
			multiSelect : true,
			editable:true,
			forceSelection:true,
			minLength : 0,
			//width : 200,
			triggers: { 
                clear: {
                    cls: 'x-form-clear-trigger',
                    handler: function() {
                          this.clearValue();
                          searchedColumn='';
                         // Ext.QuickTips.register( {target : columnCombo.getEl(),text : columnCombo.getRawValue() });
                         }
                    }
         },			
	     listeners:{
		   select: function(combo,records,eOpts){
			  //Ext.QuickTips.register( {target : combo.getEl(),text : combo.getRawValue() });
		   }
         }
       });
		/*var	columnCombo = Ext.create('Ext.form.ComboBox',{
			typeAhead : true,
			triggerAction : 'all',
			store : columnsDS,
			valueField: 'columnName',        
			displayField:'columnName',
			emptyText:'Select a column',
			queryMode: 'local',
			lazyRender : true,
			selectOnFocus : true,
			multiSelect : true,
			editable:true,
			forceSelection:true,
			minLength : 0,
			tpl: Ext.create('Ext.XTemplate',
            		'<div class="selectall">Select All</div><tpl for="."><div class="x-boundlist-item">{columnName}</div></tpl>'
                ),
			listConfig: {
	             emptyText: 'Search Not Found...',
	             minWidth: 250,
	             resizable:true,
	             resizeHandles:'e',
	             listeners: {
	            	 el: {
	            		 click: {
	            			 delegate: '.selectall',
	                         fn: function(ev, div) {
	                        	 console.log(ev+'==click='+div);
	                        	 
	                        	 if( ! allSelected) {
	                        		    columnCombo.select(columnCombo.getStore().getRange());
	                        		    div.innerHTML='Deselect All';
	                                    allSelected = true;
	                                }else{
	                                	columnCombo.reset();
	                                    div.innerHTML='Select All';
	                                    allSelected = false;
	                                }
	                        	 
	                         }
	            		 }
	            	 }
	             }
            },
			width : 250,
			triggers: { 
                    clear: {
                        cls: 'x-form-clear-trigger',
                        handler: function() {
                              this.clearValue();
                              searchedColumn='';
                              Ext.QuickTips.register( {target : columnCombo.getEl(),text : columnCombo.getRawValue() });
                             }
                        }
             },			
		   listeners:{
			   select: function(combo,records,eOpts){
				  Ext.QuickTips.register( {target : combo.getEl(),text : combo.getRawValue() });
			   }
             }
        });*/
		
		/*columnCombo.on('select',function(combo, record, index) { 
			searchedColumn = columnCombo.getValue().toString();
			if(searchedColumn== 'ALL' && !allClicked){
				allClicked=true;
				searchedColumn=columnsfields.join();
				columnCombo.setValue(columnsfields.join());
				columnCombo.setRawValue(columnsfields.join());
			}
			else if(searchedColumn== 'ALL' && allClicked){
				allClicked=false;
				searchedColumn='';
				columnCombo.setValue('');
				columnCombo.setRawValue('');
			}
			else{
				columnCombo.setValue(searchedColumn);
				columnCombo.setRawValue(searchedColumn);
			}
			console.log('selected searchedColumn '+searchedColumn);
		});
		
		columnCombo.on('blur',function(combo,event, eOpts ){
			columnCombo.setValue(searchedColumn);
			columnCombo.setRawValue(searchedColumn);
		});*/
       //schema model
       Ext.define('SchemaModel', {
		extend: 'Ext.data.Model',
		idProperty : 'schemaName',
		fields: [
				  {name: 'schemaName', type: 'string'}
	    ]});
		
		//schema store
		 var schemaDS = Ext.create('Ext.data.Store', {
				model: 'SchemaModel',
				pageSize:50,
				autoLoad:false,
				proxy:{
				type: 'ajax',
				url:'sfdata?req=getSchema',
				reader:{
						   type:'xml',
						   record: 'schema'
					  }
				},
				listeners:{
					load:function(store,records, successful, eOpts){
						if(!successful){
		        	    	 window.location.href="login";
		        	    }
	            		else if(store.getTotalCount() == 0){
 	            			msgTextArea.setValue(recordNotFound+" for schema");
 	            		}
 	            		else{
 	            			var sname=store.getAt(0).get('schemaName');
 	            			if(sname.includes('Error')){
	 	            		    store.removeAll();
	 	            			msgTextArea.setFieldStyle('color:red');
	 	            			msgTextArea.setValue(sname+" for schema");
	 	            		}
	 	            		else {
	 	            			msgTextArea.setFieldStyle('color:black');
	 	            			selectedSchema=sname;
								schemaCombo.setValue(selectedSchema);
					        	schemaCombo.setRawValue(selectedSchema);
								treeStore.load();
	 	            		}
					     }
					},
					beforeload:function(store){
						//console.log('before load sf_db_name'+sf_db_name);
						schemaDS.proxy.extraParams  =  { db:sf_db_name,wh:selectedWH};
					}
				}
			});
			
			//db dropdown
            var	schemaCombo = Ext.create('Ext.form.ComboBox',{
                                typeAhead: true,
     							triggerAction: 'all',
     							store : schemaDS,
  								valueField: 'schemaName',        
  								displayField:'schemaName',
  								queryMode:'local',
  								emptyText:'Select a schema',
 								lazyRender:true,
 								pageSize:50, 
 								minChars:0,     
 								width:150,
      							selectOnFocus:true,
 								listConfig: {
  	                                loadingText:'Loading..',
									minWidth: 250,
									resizable:true,
									resizeHandles:'e'
                                }
                      });
            
            schemaCombo.on('select',function(combo, record, index) { 
            	selectedSchema = schemaCombo.getValue();
    			//console.log('selected Schema '+selectedSchema);
    			treeStore.load();
    		});
            schemaCombo.on('blur',function(combo,event, eOpts ){
            	schemaCombo.setValue(selectedSchema);
            	schemaCombo.setRawValue(selectedSchema);
    		});
           //query toolbar
             /*  queryArea = Ext.create('Ext.form.TextField',{
        		minHeight : 15,
        		maxLength:1000,
        		id:'queryeditor',
	            width: '90%',
	            disabled:true,
	            emptyText:' Write the snowflake query here...'
            });*/
            var actionToolBar=Ext.create('Ext.toolbar.Toolbar',{ 
                dock:'top',
       		    items:[
       		    	   {
          	 	         text: createRecord,
          	 	         iconCls:'add',
          	 	         tooltip:createToolTip,
          	 	         handler : function(){
          	 	        	if(sf_db_name ==undefined || sf_db_name ==''){
   		        			 Ext.MessageBox.alert(errorText,'Please select a database');
   		        		}
   		        		else if(tableName ==undefined || tableName ==''){
   		        			 Ext.MessageBox.alert(errorText,'Please select a table');
   		        		}
   		        		else{
   		        			msgTextArea.setValue("");
   		        			--row_id_count;
   		        			var obj={};
   		        			for( var i = 0; i < columnsfields.length; i++) {
   		        				 var v=columnsfields[i];
   		        				 console.log('columnsfields[i]===='+v);
   		        				 obj.v = "";
   		        			}
   		        			var m=createModelWithCustomProxyForRow(fields);
   		        			var dm=Ext.create(m,obj); 
   		        			dynamicCellEdit.cancelEdit();
   		        			dm.commit();
   		        			dynamicStore.insert(0,dm);
   		        			dynamicStore.getAt(0).set('EF_ROW_ID', row_id_count);
   		        			dynamicGrid.getSelectionModel().select(0);
   		        		}
          	 	          }
          	 	        },'-',
       		    	{
       		    	     text:'<font class="my_btn_style">'+tempSaveBtn+'</font>',
				         iconCls:'save',
				         tooltip:saveToolTip,
				         id:'save',
				         handler : function(){
				        	 msgTextArea.setValue(""); 
				        	 var changes = new Array();
				        	 dynamicCellEdit.cancelEdit();
			                 var modifiedRecords =dynamicStore.getModifiedRecords(); 
			                 if (modifiedRecords.length == 0) {
			                     msgTextArea.setValue("No Changes to Save.");
			                     }
			                 else{
			                	 for ( var i = 0 ; i < modifiedRecords.length ; i++ ) {	   
			                       changes.push(modifiedRecords[i].data); 
			                   }
			                   submitChanges( changes ,"update",true); 
			                  }
				           }
				     },'-',
			        {
				    	text:'<font class="my_btn_style">'+updateOriginalBtn+'</font>',
			        	tooltip:'',
			        	id:'update',
			        	handler:function(){
			        		if(sf_db_name ==undefined || sf_db_name ==''){
			        			 Ext.MessageBox.alert(errorText,'Please select a database');
			        		}
			        		else if(tableName ==undefined || tableName ==''){
			        			 Ext.MessageBox.alert(errorText,'Please select a table');
			        		}
			        		else{
			        			Ext.Msg.show({
	   								title:'Want to Update?',
					   				msg: 'Would you like to update the selected table?',
					   				buttons: Ext.MessageBox.YESNO,   
	   								fn: function(btn,val){ 
	   									if(btn =='yes'){
	   										Ext.Ajax.request({
	   							            	url:        'sfdata?req=updateTempTable&dbName='+sf_db_name,
	   								            success:    function(result,request) {
	   									            var message=result.responseText.trim();
	   									            if(message.includes('SessionExpired')){
	   							        	    	   window.location.href="login";
	   							        	        }
	   									            else if(message.includes('Error')){
		   					 	            			msgTextArea.setFieldStyle('color:red');
		   					 	            			msgTextArea.setValue(message);
		   					 	            		}
		   					 	            		else {
		   								                msgTextArea.setValue(message);
		   								                dynamicStore.removeAll(); 
		   								                tableName='';
		   					 	            		}
	   							                },
	   								            params:     {tblName:tableName,schema:selectedSchema,wh:selectedWH }
	   								        });
							            }
							   		},
							   		animEl: 'elId'
								});
			        		}
			        	}
			        },'-',
			        {
			            text:'<font class="my_btn_style">'+tempDiscardBtn+'</font>',
			        	tooltip:'',
			        	id:'discard',
			        	handler:function(){
			        		if(sf_db_name ==undefined || sf_db_name ==''){
			        			 Ext.MessageBox.alert(errorText,'Please select a database');
			        		}
			        		else if(tableName ==undefined || tableName ==''){
			        			 Ext.MessageBox.alert(errorText,'Please select a table');
			        		}
			        		else{
			        			Ext.Msg.show({
	   								title:'Want to Discard?',
					   				msg: 'Are you sure to discard the changes made?',
					   				buttons: Ext.MessageBox.YESNO,   
	   								fn: function(btn,val){ 
	   									if(btn =='yes'){
	   										Ext.Ajax.request({
	   							            	url:        'sfdata?req=discardTempTable&dbName='+sf_db_name,
	   								            success:    function(result,request) {
	   									            var message=result.responseText.trim();
	   									            if(message.includes('SessionExpired')){
	   							        	    	   window.location.href="login";
	   							        	        }
	   									            else if(message.includes('Error')){
		   					 	            			msgTextArea.setFieldStyle('color:red');
		   					 	            			msgTextArea.setValue(message);
		   					 	            		}
		   					 	            		else {
		   								                msgTextArea.setValue(message);
		   								                dynamicStore.removeAll(); 
		   								                tableName='';
		   					 	            		}
	   							                },
	   								            params:     {tblName:tableName,schema:selectedSchema,wh:selectedWH }
	   								        });
							            }
							   		},
							   		animEl: 'elId'
								});
			        		}
			        		
			        	}
			        },'-',
			        {
				        text: removeRecord ,
				        iconCls:'remove',
				        id:'deleteData',
				        tooltip:removeToolTip,
				        handler : function(){
				        	var recs = dynamicGrid.getSelectionModel().getSelection();
	        				if (recs.length > 0){
	         					//Show a delete dialog using config options:
								Ext.Msg.show({
	   								title:wantToDeleteTitle,
					   				msg: wantToDeleteMsg+'Selected Record?',
					   				buttons: Ext.MessageBox.YESNO,   
	   								fn: function(btn,val){ 
	   									if(btn =='yes'){
	 										var recs = dynamicGrid.getSelectionModel().getSelection();
	                      					var changes = new Array();
	                      					var id;
											for(var i = 0; i < recs .length; i++){
	    										id= recs[i].get( 'EF_ROW_ID' );
	    										break;
											}
											if(id == 0 || id == '0')
												msgTextArea.setValue(recordNotFound);
											else
											    submitChanges( id,"delete" );
							            }
							   		},
							   		animEl: 'elId'
								});
							}
						else{
						    msgTextArea.setValue("Please Select a record.");
						 }
				       }
	 	           
			        	
			        },
			        '-',excellActionCombo,'-',
			       /* {
			            text: 'Upload Excell',
			            iconCls:'excelExport',
			            tooltip:'Select a excell file to upload',
			            handler: function(){
			            	if(sf_db_name ==undefined || sf_db_name ==''){
			        			 Ext.MessageBox.alert(errorText,'Please select a database');
			        		}
			        		else if(tableName ==undefined || tableName ==''){
			        			 Ext.MessageBox.alert(errorText,'Please select a table');
			        		}
			        		else{
			        			showUploadWindow();
			        		}
			            }
        			 },'-',
 			        {
 			            text: 'Download Template',
 			            iconCls:'excelExport',
 			            tooltip:'Downlaod the upload template',
 			            handler: function(){
 			            	if(sf_db_name ==undefined || sf_db_name ==''){
 			        			 Ext.MessageBox.alert(errorText,'Please select a database');
 			        		}
 			        		else if(tableName ==undefined || tableName ==''){
 			        			 Ext.MessageBox.alert(errorText,'Please select a table');
 			        		}
 			        		else{
 			        			window.open('sfimportupload?req=generateTemplate&tblName='+tableName+'&fields='+columnsfields.join()+'&dbName='+sf_db_name+'&schema='+selectedSchema+'&wh='+selectedWH,'mywindow','width=400,height=200,scrollbars=yes,resizable=yes');
 			        		}
 			            }
         			},
			        ,'-',*/
			        {
			        	xtype:'button',
			            text:'<font class="my_btn_style">Filter Query</font>',
			            tooltip:'',
			            id:'filterquery',
			        	handler:function(){
			        		if(sf_db_name ==undefined || sf_db_name ==''){
			        			 Ext.MessageBox.alert(errorText,'Please select a database');
			        		}
			        		else if(tableName ==undefined || tableName ==''){
			        			 Ext.MessageBox.alert(errorText,'Please select a table');
			        		}
			        		else{
			        			
			        			Ext.define('comboFilterQuery', {
			        		           alias: 'plugin.selectedFilter',
			        		           init: function (combo) {
			        		                var allSelected = false,
			        		                id = combo.getId() + '-toolbar-panel';

			        		               Ext.apply(combo, {
			        		                   listConfig: {
			        		                       tpl : new Ext.XTemplate(
			        		                           '<div id="' + id + '"></div><tpl for="."><div class="x-boundlist-item">{' + combo.displayField + '}</div></tpl>'
			        		                       ),
			        		      	             minWidth: 200,
			        		      	             resizable:true,
			        		      	             resizeHandles:'e'
			        		                   }
			        		               });
			        		               var btn=Ext.create('Ext.Component', {
			        		                   html:'<div class="selectall1">Select all</div>',
			        		                   listeners: {
			        		               		render: function(c){
			        		               			var el=c.getEl();
			        		               			el.on({
			        		               				click: function(b) {
			        		               					 if( ! allSelected) {
			        		                                        combo.select(combo.getStore().getRange());;
			        		                                        btn.update('<div class="selectall1">Deselect All</div>');
			        		                                        allSelected = true;
			        		                                    }else{
			        		                                        combo.reset();
			        		                                        btn.update('<div class="selectall1">Select All</div>');
			        		                                        allSelected = false;
			        		                                    }
			        		               					 b.stopEvent();
			        		               				}
			        		               			});
			        		               		}
			        		               	}
			        		               });
			        		              
			        		               combo.on({
			        		                   select: function (me, records) {
			        		                	   
			        		                   },
			        		                   beforedeselect: function (me, record, index) {
			        		                     
			        		                   },
			        		                   expand: {
			        		                       fn: function() {
			        		                           var dropdown = Ext.get(id).dom.parentElement;
			        		                           var container = Ext.DomHelper.insertBefore(dropdown, '<div id="'+id+'-container"></div>', true);
			        		                           btn.render(container);
			        		                       },
			        		                       single: true
			        		                   }
			        		               });
			        		           }
			        		       });
			        		       var	filterCombo=  Ext.create('Ext.form.ComboBox', {
			        		            plugins: ['selectedFilter'],
			        		            fieldLabel:'Table Columns ',
			        		            typeAhead : true,
			        					triggerAction : 'all',
			        					store : columnsDS,
			        					valueField: 'columnName',        
			        					displayField:'columnName',
			        					emptyText:'Select a column',
			        					queryMode: 'local',
			        					lazyRender : true,
			        					selectOnFocus : true,
			        					multiSelect : true,
			        					editable:true,
			        					margin:'5px',
			        					forceSelection:true,
			        					minLength : 0,
			        					//value:'ALL',
			        					width : 300,
			        					triggers: { 
			        		                clear: {
			        		                    cls: 'x-form-clear-trigger',
			        		                    handler: function() {
			        		                          this.clearValue();
			        		                       }
			        		                    }
			        		         },			
			        			     listeners:{
			        				   select: function(combo,records,eOpts){
			        				   }
			        		         }
			        		       });
			        		         //columnsDS.add({columnName:'ALL'});
				        			 //filterCombo.setRawValue('ALL');
				        		     //filterCombo.setValue('ALL');
			        		       var  filterTextArea = new Ext.form.TextArea( {
										width : (680),
										fieldLabel:'Where clause',
										height : 150,
										editable:true,
										margin:'5px',
										emptyText:' here written text will be added as a where clause for the selected table and its selected columns'
									});
			        		 var queryWindow =Ext.create('Ext.window.Window',{
			     				title : 'Query Filter For - '+tableName,
			     				width : (720),
			     				height : (450),
			     				bodyStyle : 'padding:5px;',
			     			    layout : 'column',
			     				frame : true,
			     				modal : true,
			     				minimizable : false,
			     				resizable:false,
			     				onEsc : function() {
			     			    },
			     				maximizable : false,
			     				closable : true,
			     				closeAction : 'close',
			     				close : function() {
			     					queryWindow.destroy();
			     				},
			     				buttonAlign:'center',
			     				buttons:[
			     					{
			     					 xtype:'button',
			     					 text:'Filter',
			     					 margin:'5px',
			     					 handler:function(){
			     						var columns=filterCombo.getRawValue()+"";
			     						var allColumn='N';
			     						if(columns == undefined || columns == ''){
			     							columns=columnsfields.join();
			     							allColumn='Y';
			     						}
			     						
			     						var filterQuery=filterTextArea.getValue();
			     						if(filterQuery == undefined || filterQuery == '')
			     							filterQuery='';
			     						
			     						filterGrid(columns,filterQuery,allColumn);
			     						queryWindow.destroy();
			     						
			     					 }
			     					},
			     					{
				     					 xtype:'button',
				     					 text:'Cancel',
				     					 margin:'5px',
				     					 handler:function(){
				     						queryWindow.destroy();
				     					 }
				     					}
			     				],
			     				items : [
			     					    filterCombo,
			     					    filterTextArea,
			     					    {
			     					    	xtype:'component',
			     					    	margin:'5px',
			   html: 'Note:<br/>'+
				   '<font class="my_btn_style">1: By default all columns will be selected</font>.<br/>'+
				   '<font class="my_btn_style">1: Need not include "WHERE" clause in text area</font>.<br/>'+
				   '<font  class="my_btn_style">2: Generated query will be in either of the following format</font>.<br/>'+
			      '  A. <font class="my_btn_style">select * from your_selected_table where your enetered_filter_criteria</font>.<br/>'+
			      '  B. <font class="my_btn_style">select your_selected_columns from your_selected_table where your enetered_filter_criteria<font/>.'
			     					    }
			     					]
			     				});

			        		 queryWindow.show();
			        		 queryWindow.center();
			        	   }
			        	}
			        },'-',enableAutoSaveBtn,'-',autoSaveIntervalBox,'-',enableColumnDetailPopupBtn,'-',
			        {
				        text: NEW_SCRIPT ,
				        id:'new_script',
				        tooltip:'Create new script',
				        handler : function(){
				        	
				        if(scriptWindow == null){
				        	Ext.define('ScriptDatabaseModel', {
								extend: 'Ext.data.Model',
								idProperty : 'dbName',
								fields: [
										  {name: 'dbName', type: 'string'}
				   				]});
				        	//db store
				            var scriptDbDS = Ext.create('Ext.data.Store', {
				       	        model: 'ScriptDatabaseModel',
				       	        pageSize:50,
				       	        autoLoad:true,
				       	        proxy:{
				       			type: 'ajax',
				                url:'sfdata?req=getDBsName&dbName='+sf_db_name+'&wh='+selectedWH,
				       	        reader:{
				       			           type:'xml',
				       					   record: 'db'
				       		          }
				       			},
				                   listeners:{
				                   load:function(store, records, successful, eOpts){
				                   		if(!successful){
				       	        	    	 window.location.href="login";
				       	        	    }
				                   		else if(store.getCount() > 0){
				                   			     var error=store.getAt(0).get('dbName');
				        	                     if(error.includes('Error')){
				        	            		    store.removeAll();
				        	            			msgTextArea.setFieldStyle('color:red');
				        	            			msgTextArea.setValue(error);
				        	            		}
				        	            		else {
				        	            			msgTextArea.setFieldStyle('color:black');
				        	            		}
				                   		}
				                   	}
				                   }
				       	    });
				            var	scriptDbCombo = Ext.create('Ext.form.ComboBox',{
				                typeAhead: true,
				         		triggerAction: 'all',
				         		fieldLabel:'Database<font color=red>*</font>',
				         		store : scriptDbDS,
				         		valueField: 'dbName',        
				         		displayField:'dbName',
				         		queryMode:'local',
				         		emptyText:'Select Database Name',
				         		lazyRender:true,
				         		pageSize:50, 
				         		minChars:0,      									
				         		selectOnFocus:true,
				         		width:300,
				         		labelWidth:100,
				         		listConfig: {
				                    loadingText:'Loading..',
				         			minWidth: 300,
				         			resizable:true,
				         			resizeHandles:'e'
				                }
				           });

				            scriptDbCombo.on('select',function(combo, record, index) { 
				            	selected_db_for_script = scriptDbCombo.getValue();
				         	    scriptSchemaDS.load();
				         	});
				            
				                Ext.define('ScriptSchemaModel', {
				        		extend: 'Ext.data.Model',
				        		idProperty : 'schemaName',
				        		fields: [
				        				  {name: 'schemaName', type: 'string'}
				        	    ]});
				        		//schema store
				        		 var scriptSchemaDS = Ext.create('Ext.data.Store', {
				        				model: 'ScriptSchemaModel',
				        				pageSize:50,
				        				autoLoad:false,
				        				proxy:{
				        				type: 'ajax',
				        				url:'sfdata?req=getSchema',
				        				reader:{
				        						   type:'xml',
				        						   record: 'schema'
				        					  }
				        				},
				        				listeners:{
				        					load:function(store,records, successful, eOpts){
				        						if(!successful){
				        		        	    	 window.location.href="login";
				        		        	    }
				        	            		else if(store.getTotalCount() == 0){
				         	            			
				         	            		}
				         	            		else{
				         	            			var sname=store.getAt(0).get('schemaName');
				         	            			if(sname.includes('Error')){
				        	 	            		    store.removeAll();
				        	 	            		}
				        					     }
				        					},
				        					beforeload:function(store){
				        						scriptSchemaDS.proxy.extraParams  =  {db:selected_db_for_script,wh:selectedWH};
				        					}
				        				}
				        			});
				        		//db dropdown
				                 var	scriptSchemaCombo = Ext.create('Ext.form.ComboBox',{
				                                    typeAhead: true,
				          							triggerAction: 'all',
				          							fieldLabel:'Schema<font color=red>*</font>',
				          							store : scriptSchemaDS,
				       								valueField: 'schemaName',        
				       								displayField:'schemaName',
				       								queryMode:'local',
				       								emptyText:'Select a schema',
				      								lazyRender:true,
				      								pageSize:50, 
				      								minChars:0,     
				      								width:300,
				      								labelWidth:100,
				           							selectOnFocus:true,
				      								listConfig: {
				       	                                loadingText:'Loading..',
				     									minWidth: 300,
				     									resizable:true,
				     									resizeHandles:'e'
				                                     }
				                           });
				                 
				                 scriptSchemaCombo.on('select',function(combo, record, index) { 
				                	 selected_schema_for_script= scriptSchemaCombo.getValue();
				         		});
				               //search box 
				             	var scriptBox =  Ext.create('Ext.form.TextField',{
				             		maxLength : '50',
				             		width: '110px',
				             		fieldLabel:'Job Name<font color=red>*</font>',
				             		width:300,
      								labelWidth:100,
				             		emptyText:'Enter the job name'
				             	 });
				             	var note=Ext.create('Ext.Component', {
							    	marginTop:'15px',
							    	marginBottom:'15px',
									html: 'Note: '+'<font class="my_btn_style">This will create a table with following columns - \nJOB_GROUP,TASK_NO,EXECUTION_ORDER,SCRIPT_TYPE,\n RUN_SCRIPT,RUN_TASK,TASK_COMMENT,JOB_START,JOB_END,\nERROR_IF_ANY </font>.<br/>'
							    });
				             	
				          		  var scriptForm = Ext.create('Ext.form.FormPanel',{ 
				          			    baseCls:'x-plain',
				          				method: "post",
				          		       	width: 380,
				          				items: [
				          					scriptDbCombo,scriptSchemaCombo,scriptBox,
				          					Ext.create('Ext.form.field.File',{
				          						id: 'script_xcell_upload',
				          						width:300,
			      								labelWidth:100,
				          						fieldLabel: 'Choose a file',
				          						allowBlank:true,
				          						blankText:'Choose a file',
				          						name: 'script_xcell_upload',
				          						clearOnSubmit : false,
				          						buttonCfg: {
				          						   text: 'Browse'
				          						}
				          			       }),
				          			     note
				          			]
				          		 });
				             	scriptWindow = Ext.create('Ext.window.Window',{
				        	        title: 'Create New Job',
				        	        width: 400,
				        	        autoHeight:true,
				        	        plain:true,
				        	        closable:true,
				        	        closeAction : 'hide',
				        			modal:true,
				        			minimizable: false,
				        			resizable:false,
				        	        bodyStyle:'padding:5px;',
				        	        buttonAlign:'center',
				        	        items: [scriptForm],//,tableCombo
				        	        buttons: [
				        	        {
				        	          text: 'Cancel',
				        	          handler: function(){
				        	        	  scriptWindow.hide();
				        	           }      
				        	        },
				        			{
				        	          text: 'Create',
				        	          handler: function(){
				        	        	var sname=scriptBox.getValue();
				        	     	    if(selected_db_for_script ==''){
				        	     			 Ext.MessageBox.alert(errorText,'Please select a database');
				        	     		} 
				        	     		else if(selected_schema_for_script ==''){
				        	     			 Ext.MessageBox.alert(errorText,'Please select a schema');
				        	     		} 
				        	     		else if(sname ==''){
				        	     			 Ext.MessageBox.alert(errorText,'Please select a name');
				        	     		} 
				        	     		else{
				        	     			 var scriptMask = new Ext.LoadMask({
				        		                 msg    : 'Please wait...',
				        		                 target : scriptWindow
				        		              });
				        	     			scriptMask.show();
				        	     			//var requestURL='';
				        	     			//scriptForm.getForm().enctype = scriptForm.getForm().encoding = 'application/x-www-form-urlencoded';
				        					var url= 'sfjob?req=createJobTable'+'&dbName='+selected_db_for_script+'&schema='+selected_schema_for_script+'&wh='+selectedWH
				        					+'&job_table='+sname;
				        					scriptForm.getForm().submit({ 
				        						url:url,
				        						//isUpload: true,
				        						reset:false,
				        						success: function(result,response){
				        							 scriptMask.hide();
				        							 var resp=response.result.msg.trim();
				        							 Ext.MessageBox.alert(successText,resp); 
				        							 treeStore.getRootNode().removeAll();
				        							 treeStore.load();
				        					     },
				        						 failure: function(result,response){
				        							console.log('in fail');
				        							scriptMask.hide();
				        							var resp=response.result.msg.trim();
				        							Ext.MessageBox.alert(errorText,resp); 
				        						 }
				        					});
				        	     		}
				        	        }
				                 }],
				                 listeners : {
				           			beforehide : function(){
				           				selected_db_for_script='';
				           				selected_schema_for_script='';
				           				scriptDbCombo.setValue('');
				           				scriptDbCombo.setRawValue('');
				           				scriptSchemaCombo.setValue('');
				           				scriptSchemaCombo.setRawValue('');
				           				scriptBox.setValue('');
				           		    },
				           			hide:function(win,e){
				           				try{	  		
				           					scriptWindow.hide();
				           		 		}
				           				catch(err){
				           					scriptWindow.hide();
				           		 		}
				           			}
				                    }
				               });
				           }
				        scriptWindow.show();
				       }//handler
			        },'-',
			        {
				        text: RUN_SCRIPT ,
				        id:'run_script',
				        tooltip:'Run a script',
				        handler : function(){
				        	if(sf_db_name ==undefined || sf_db_name ==''){
			        			 Ext.MessageBox.alert(errorText,'Please select a database');
			        		}
			        		else if(tableName ==undefined || tableName ==''){
			        			 Ext.MessageBox.alert(errorText,'Please select a table');
			        		}
			        		else{
			        			if(tableName.startsWith("jt_") || tableName.startsWith("JT_")){
			        				msgTextArea.setValue("");
			        				var myMask = new Ext.LoadMask({
			        		            msg    : 'Please wait...',
			        		            target : dynamicGrid
			        		        });
			        		        myMask.show();
			        		       		Ext.Ajax.request({
			        		            	url:        'sfjob?req=runJob',
			        			            success:    function(result,request) {
			        			            	var resp=result.responseText.trim();
			        			            	msgTextArea.setValue(resp);
			        			            	myMask.hide(); 
			        		                },
			        		                failure:function(result,request) {
			        			   				  myMask.hide();
			        			   				var resp=result.responseText.trim();
			        			            	msgTextArea.setValue(resp);
			        			   			},
			        			            params:     {dbName:sf_db_name,tblName:tableName,schema:selectedSchema,wh:selectedWH }
			        			        });
			        		       
			        			}
			        			else
			        				 Ext.MessageBox.alert(errorText,'Please select a job table');
			        		}
				       }
			        }
       	         ]
            });
     //grid tool bar
     var toolBar=Ext.create('Ext.toolbar.Toolbar',{ 
         dock:'top',
         //overflowX: 'scroll',
		 items:[
	         '<font class="my_btn_style">Database</font>: ',dbCombo,'-','<font class="my_btn_style">Schema</font>: ',schemaCombo,'-',
	         fromField,'-',toField,'-', searchBox,'<font class="my_btn_style">Select the column</font>: ',columnCombo,
				'-',{
			         text: '',
			         iconCls:'searchcls',
			         id:'search',
			         tooltip:'Enter the text to be searched and select the column name then hit the search icon',
			         handler : function(){
			        	    searchText=searchBox.getValue();
			        	    searchedColumn = columnCombo.getValue().toString();
			        	    if(searchedColumn==''){
				        		 searchedColumn=columnsfields.join();
				            }
			        	    
			        	    if(searchText==''){
			        		  Ext.MessageBox.alert(errorText,'Please enter a search text.');
			        		  return false;
			        	 	}
			        	    else{
			        	       clearErrorGridAndStore();
			        		   msgTextArea.setValue("");
							   dynamicStore.reload();	
			        	    }
			        	    //console.log("searchedColumn =="+searchedColumn);
					  }
	               }
         ]
	    });
        //define grid store
        Ext.define('DynamicDataStore', {
        	extend: 'Ext.data.Store', 
     		autoLoad:false,
     		//pageSize:300,
     		remoteSort:true,
     	    listeners : {
     		   beforeload: function(store, records, successful,operation, options) {
     			   var fromValue=fromField.getValue();
     			   var todvalue=toField.getValue();
     			   
     			  if(fromValue == null || fromValue =='null' || fromValue == undefined || fromValue == ''){
     				 fromValue=0;
     			  }
     			  if(todvalue == null || todvalue =='null' || todvalue == undefined || todvalue == ''|| todvalue == '0'){
     				 todvalue=300;
     				 dynamicStore.setPageSize (300);
     			  } 
     			  else
     			   dynamicStore.setPageSize (todvalue);
     			  
     			          console.log(fromValue +"==============="+todvalue);
     			          dynamicStore.proxy.extraParams  =  { dbName:sf_db_name,tblName:tableName,fields:columnsfields.join(),
     					  searchText:searchText,searchedColumn:searchedColumn,wh:selectedWH,start:fromValue,limit:todvalue};
     			  
     		   },
     		   load:function(store){
     			   //myMask.hide();
     			   if(store.getCount() ==  0)
     			      msgTextArea.setValue(recordNotFound);
     			   else{ 
     				   var rec=store.getAt(0).get('EF_ROW_ID');
     				   if(rec.includes('Error')){
	     				   msgTextArea.setFieldStyle('color:red');
	     			       msgTextArea.setValue(rec+" for "+tableName+" data");
	     			       store.removeAll();
	     			   }
	     			   else{
	     				   //console.log(store.getAt(0).get('HTML'));
	     				   msgTextArea.setFieldStyle('color:black');
	     			     }
	     		      }
     		      }
     	     }
         });
      //create grid store
       var dynamicStore = Ext.create('DynamicDataStore', {
    	    model: createModelWithCustomProxy([])
       });
       
       function createModelWithCustomProxyForRow(fields){
      	    return Ext.define('DynamicTableModel', {
      	        extend: 'Ext.data.Model',
      	        idProperty:'EF_ROW_ID',
      	        fields: fields
      	    });
          }
       //creating dynamic model
       function createModelWithCustomProxy(fields){
    	    return Ext.define('DynamicTableModel' + Ext.id(), {
    	        extend: 'Ext.data.Model',
    	        fields: fields,    
    	        proxy: {
    	     		type: 'ajax',
    	     		url: 'sfdata?req=getData'+'&schema='+selectedSchema,
    	             reader:{
    	     		     type:'xml',
    	     	         record: 'dynamicRecord',
    	                 totalProperty: 'recordCount'
    	     	    }
    	     	}
    	    });
    	}
       function createModelWithCustomProxyForFilter(fields,filterQuery,allColumn){
	   	    return Ext.define('DynamicTableModel' + Ext.id(), {
	   	        extend: 'Ext.data.Model',
	   	        fields: fields,    
	   	        proxy: {
	   	     		type: 'ajax',
	   	     		url: 'sfdata?req=getFilterData'+'&schema='+selectedSchema+'&filterQuery='+encodeURI(filterQuery)+'&allColumn='+allColumn,
	   	             reader:{
	   	     		     type:'xml',
	   	     	         record: 'dynamicRecord',
	   	                 totalProperty: 'recordCount'
	   	     	    }
	   	     	}
	   	    });
   	   }
     //populating grid column and store   
      function filterGrid(columns,filterQuery,allColumn){
    	  searchText='';
    	  searchedColumn='';
    	  searchBox.setValue('');
    	  columnCombo.setValue('');
    	  columnsfields = [];
     	  dynamicColumns = [];
     	  fields = [];
     	  columnsNames=[];
     	  if(!columns.includes('EF_ROW_ID'))
     		 columns=columns+",EF_ROW_ID";
     		  
     	  var fieldsArray=columns.split(',');
     	  //console.log("fieldsArray "+fieldsArray);
     	   for (var i = 0; i < fieldsArray.length; i++) {
     		  var element=fieldsArray[i].trim();
     		  fields.push({ name: element, type: 'string'});
    		  columnsfields.push(element);
    		  columnsNames.push([element]);
    		  if(enableColumnDetail){//enable popup cell
    			  if(element == 'EF_ROW_ID'){
    	     			 dynamicColumns.unshift(
    	         				 {
    	         				        header:element,
    	         				        dataIndex: element,
    	         				        width: 100,
    	         				        sortable:false
    	         				 }
    	         		     );
    	     		 }
    	     		 else{
    	     			dynamicColumns.push(
    	         				 {
    	         				        header:element,
    	         				        dataIndex:element,
    	         				        width: 150,
    	         				        renderer:Ext.util.Format.htmlEncode,
    	         				        sortable:false
    	         				 }
    	         			 );
    	     		     }
    		  }
    		  else{//disable popup cell
    			  if(element == 'EF_ROW_ID'){
    	     			 dynamicColumns.unshift(
    	         				 {
    	         				        header:element,
    	         				        dataIndex: element,
    	         				        width: 100,
    	         				        sortable:false
    	         				 }
    	         		     );
    	     		 }
    	     		 else{
    	     			dynamicColumns.push(
    	         				 {
    	         				        header:element,
    	         				        dataIndex:element,
    	         				        width: 150,
    	         				        renderer:Ext.util.Format.htmlEncode,
    	         				        sortable:false,
    	         				        editor: Ext.create('Ext.form.field.TextArea',{
											height :35,
											margin: '37 0 0 0',
											enableKeyEvents: true,
											editable:true,
											listeners: { 
								                afterrender: function(){
								                    var me = this;
								                     me.el.swallowEvent(['keypress','keydown']); 
								                }
											}
									     })	
    	         				 }
    	         			 );
    	     		     }
    		  }
    		  
     	   } 
     	 dynamicStore.removeAll();
     	 //console.log(dynamicStore.getCount());
     	 dynamicStore=null;
     	 //console.log('dynamicStore '+dynamicStore);
     	 
     	 
     	 dynamicStore = Ext.create('DynamicDataStore', {
     	    model: createModelWithCustomProxyForFilter(fields,filterQuery,allColumn)
     	 });
     	 dynamicStore.reload();
     	 dynamicGrid.setColumns(dynamicColumns);
     	 dynamicPaging.setStore(dynamicStore);
     	 dynamicGrid.reconfigure(dynamicStore, dynamicColumns);
     	 msgTextArea.setValue("");
        //console.log(columnsNames);
     	 columnsDS.removeAll();
     	 columnsDS.loadData(columnsNames);
     	 //console.log(columnsDS.getCount());
       }
    //populating grid column and store   
     getTableColumnsName=function(tblName){
	    	 myMask = new Ext.LoadMask({
	             msg    : 'Please wait...',
	             target : dynamicGrid
	         });
	         myMask.show();
    	  searchText='';
    	  searchedColumn='';
    	  searchBox.setValue('');
    	  columnCombo.setValue('');
    	  //console.log("schema "+selectedSchema);
    	 Ext.Ajax.request({
         	 url:'sfdata?req=getTableColumnsName'+'&schema='+selectedSchema,
	         success:    function(result,request) {
	        	    var resp=result.responseText.trim();
	        	    if(resp.includes('SessionExpired')){
	        	    	 window.location.href="login";
	        	    }
	        	    else if(resp.includes('Error')){
	        	    	msgTextArea.setFieldStyle('color:red');
	            	    msgTextArea.setValue(resp+" for table columns");
	        	    }
	        	    else{
	        	    	msgTextArea.setFieldStyle('color:black');
	            	var data=JSON.parse(resp);
	            	 columnsfields = [];
	            	 dynamicColumns = [];
	            	 fields = [];
	            	 columnsNames=[];
	            	 //columnsNames.push(['ALL']);
	            	data.forEach(function(value, index, array){
	            		 fields.push({ name: value.name, type: 'string'});
	            		 columnsfields.push(value.name);
	            		 columnsNames.push([value.name]);
	            		 if(enableColumnDetail){//enable popup cell
		            		 if(value.name == 'EF_ROW_ID'){
		            			 dynamicColumns.unshift(
			            				 {
			            				        header:value.name,
			            				        dataIndex: value.name,
			            				        width: 100,
			            				        sortable:false
			            				 }
			            		     );
		            		 }
		            		 else{
		            			dynamicColumns.push(
			            				 {
			            				        header:value.name,
			            				        dataIndex: value.name,
			            				        width: 150,
			            				        renderer:Ext.util.Format.htmlEncode,
			            				        sortable:false
			            				 }
			            			 );
		            		     }
	            		 }
	            		 else{//disable popup cell
		            		 if(value.name == 'EF_ROW_ID'){
		            			 dynamicColumns.unshift(
			            				 {
			            				        header:value.name,
			            				        dataIndex: value.name,
			            				        width: 100,
			            				        sortable:false
			            				 }
			            		     );
		            		 }
		            		 else{
		            			dynamicColumns.push(
			            				 {
			            				        header:value.name,
			            				        dataIndex: value.name,
			            				        width: 150,
			            				        renderer:Ext.util.Format.htmlEncode,
			            				        sortable:false,
			            				        editor: Ext.create('Ext.form.field.TextArea',{
													height :35,
													margin: '37 0 0 0',
													enableKeyEvents: true,
													editable:true,
													listeners: { 
										                afterrender: function(){
										                    var me = this;
										                     me.el.swallowEvent(['keypress','keydown']); 
										                }
													}
											     })	
			            				 }
			            			 );
		            		     }
	            		     }
	            		
	            	});
	            	
	            	 dynamicStore.removeAll();
	            	 //console.log(dynamicStore.getCount());
	            	 dynamicStore=null;
	            	 //console.log('dynamicStore '+dynamicStore);
	            	 
	            	 
	            	 dynamicStore = Ext.create('DynamicDataStore', {
	            	    model: createModelWithCustomProxy(fields)
	            	 });
	            	
	            	 dynamicStore.reload();
	            	 dynamicGrid.setColumns(dynamicColumns);
	            	 dynamicPaging.setStore(dynamicStore);
	            	 dynamicGrid.reconfigure(dynamicStore, dynamicColumns);
	            	 msgTextArea.setValue("");
                     //console.log(columnsNames);
	            	 columnsDS.removeAll();
	            	 columnsDS.loadData(columnsNames);
	            	 //columnCombo.bindStore(columnsDS);
	            	 //console.log(columnsDS.getCount());
	            	 //columnsDS.reload();
	            	 myMask.hide();
	             }
             },
             failure: function(result,action){
	            	myMask.hide();
	         },
	         params:{ tblName: tblName,dbName:sf_db_name,wh:selectedWH }
	        });
    	 //
     }
     
     
	 Ext.define('dynamicGrid', {
		extend : 'Ext.grid.Panel',
		alias : 'widget.dynamicGrid',
		store:dynamicStore,
	    columns:dynamicColumns,
	    plugins:dynamicCellEdit,
	    dockedItems:[toolBar,actionToolBar,msgTextArea,dynamicPaging],
	    frame:true,
		selModel:{selType:'rowmodel'},
		viewConfig:{
				enableTextSelection:true,
				loadMask:true,
				getRowClass: function(record,rowIndex, rowParams, store) {
					if(errorXmlObject !=null){
	   	    		    //console.log('in error 1 '+sferrorStore.getCount());
		  				var gridRowid = record.get( 'EF_ROW_ID' );
		  				for (var i = 0; i < sferrorStore.getCount(); i++) {
		  					var errRowId=sferrorStore.getAt(i).get( 'ef_row_id');
		  					if(gridRowid == errRowId){
		  						//console.log("matcched ");
		  						return 'different-color-class';
		  					}
		  				}
			        } 
			  }
		},
		listeners : {
			celldblclick: function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts  ){
				   console.log('in cell db click');
				    var currentRowIndex=rowIndex;
				    var currentCellIndex=cellIndex;
				    var nbCols = dynamicColumns.length;
				    
				    
				    var recs = grid.getSelectionModel().getSelection(); 
		        	var cellId = grid.getHeaderCt().getHeaderAtIndex(cellIndex).id;
		        	var colmName = grid.getHeaderCt().getHeaderAtIndex(cellIndex).dataIndex;
		            var secondGrid=dynamicGrid.getSelectionModel().isSelected(record);
		            console.log(currentRowIndex+"=="+currentCellIndex+"=="+nbCols+"=="+recs);
		            
			          if(secondGrid==false){
			        	  dynamicGrid.getSelectionModel().select(rowIndex, true);
			          }else{
			        	  dynamicGrid.getSelectionModel().deselect(rowIndex, false);
			          }
			          if (colmName !== 'EF_ROW_ID') {
			        	  var popTitle;
			              var popText;
			              popTitle = "Details for column: "+colmName;
			              for ( var i = 0; i < recs.length; i++) {
					            popText = recs[i].get(colmName);
				                break;
				         } 
			              
			              var popupTextArea =Ext.create('Ext.form.field.TextArea', {
				                 wrap : 'off',
				                 wrap : true,
				                 pinned : true,
				                 width : 800,
				                 height : 500,
				                 minWidth : 800,
				                 minHeight : 300,
				                 hideLabel : true,
				                 dynamic : true,
				                 value : popText,
				                 //grow:true,
				                 fieldStyle: {
				                     //'fontFamily'   : 'courier new',
				                     'fontSize'     : '12px',
				                     lineHeight:'25px'
				                   }
				          });
			               
			                  var formPopupTextArea = Ext.create('Ext.form.FormPanel',{ 
				                 frame : true,
				                 bodyStyle : 'padding:5px 5px 0',
				                 width : 805,
				                 items : [ popupTextArea ]
				              });
				                var winScriptWindow =Ext.create('Ext.window.Window',{
					                   title : popTitle,
					                   width : 810,
					                   height : 510,
					                   modal:true,
					                   maskDisabled : false,
					                   iconCls : 'editComment',
					                   frame : true,
					                   animCollapse : false,
					                   constrainHeader : true,
					                   autoScroll : true,
					                   buttonAlign:'center',
					                   buttons : [
							                	  {
						                               text : 'Previous Column',
						                               handler : function() {
						                            	if(currentRowIndex >= 0 ){
						                            		if(currentCellIndex < 0){
						                            			alert('No more cell');
						                            		}
						                            		else if(currentCellIndex == 0){
						                            			alert('No more cell');
						                            		}
						                            		else{
						                            			var colmName = grid.getHeaderCt().getHeaderAtIndex(currentCellIndex).dataIndex;
							                                	recs[currentRowIndex].set(colmName,popupTextArea.getValue());
							                                	 --currentCellIndex;
							                                	var cName = grid.getHeaderCt().getHeaderAtIndex(currentCellIndex).dataIndex;
							                                	popupTextArea.setValue(recs[currentRowIndex].get(cName));
						                            		}
						                            		//var currentRowIndex=rowIndex;
						                				    //var currentCellIndex=cellIndex;
						                            		/*console.log('cellInd before '+cellInd);
						                            		 --cellInd;
						                            		 console.log('cellInd after '+cellInd)
						                            		 if(cellInd > 0){
						                            			 var colmName = grid.getHeaderCt().getHeaderAtIndex(cellInd+1).dataIndex;
							                                	 recs[rowInd].set(colmName,popupTextArea.getValue());
							                                	 
							                                	 var cName = grid.getHeaderCt().getHeaderAtIndex(cellInd).dataIndex;
							                                	 popupTextArea.setValue(recs[rowInd].get(cName));
						                            		 }
						                            		 else if(cellInd == 0){
						                            			 var colmName = grid.getHeaderCt().getHeaderAtIndex(cellInd+1).dataIndex;
							                                	 recs[rowInd].set(colmName,popupTextArea.getValue());
							                                	 
							                                	 var cName = grid.getHeaderCt().getHeaderAtIndex(cellInd).dataIndex;
							                                	 popupTextArea.setValue(recs[rowInd].get(cName));
						                            		 }
						                            		 else{
						                            			 cellInd =0;
								                                 alert('No more cell');
						                            		 }*/
						                            		
						                            	  }
						                            	else{
						                            		alert('No more row');
						                            	 }
						                               }
					                              },
					                              {
						                               text : 'Previous Row',
						                               handler : function() {
						                                
						                               }
					                              },
					                              {
						                               text : 'Ok',
						                               handler : function() {
						                               if (popupTextArea.isValid()) {  
						                            	   var colmName = grid.getHeaderCt().getHeaderAtIndex(currentCellIndex).dataIndex;
						                                   recs[currentRowIndex].set(colmName,popupTextArea.getValue());
						                            	   //var currentRowIndex=rowIndex;
						                				   //var currentCellIndex=cellIndex;
						                                   /*for ( var i = 0; i < recs.length; i++) {
						                                	  console.log('script length is '+popupTextArea.getValue().length)
							                                  recs[i].set(colmName,popupTextArea.getValue());
						                                      break;
						                                  }*/
						                                 }
						                                 winScriptWindow.destroy();   
						                              }
					                              },
					                              {
						                               text : 'Next Column',
						                               handler : function() {
						                            	   if(rowInd >= 0 ){
							                            		 if(cellInd == 0 || cellInd < nbCols){
							                            			 var colmName = grid.getHeaderCt().getHeaderAtIndex(cellInd).dataIndex;
								                                	 recs[rowInd].set(colmName,popupTextArea.getValue());
								                                	 
								                                	 var cName = grid.getHeaderCt().getHeaderAtIndex(cellInd+1).dataIndex;
								                                	 popupTextArea.setValue(recs[rowInd].get(cName));
								                                	 
								                                	 ++cellInd;
							                            		 }
							                            		 else{
							                            			 cellInd =nbCols-1;
									                                 alert('No more cell');
							                            		 }
							                            	  }
							                            	else{
							                            		alert('No more row');
							                            	 }
						                               }
					                              },
					                              {
						                               text : 'Next Row',
						                               handler : function() {
						                                
						                               }
					                              },
					                              {
						                               text : 'Cancel',
						                               handler : function() {
						                            	winScriptWindow.destroy();
						                              }
					                              } 
					                         ],
					                        listeners : {"show" : function() {
					                                     var firstElem = formPopupTextArea.getForm().findField(0);
					                           }
					                     },
					                      layout : 'column'
					                   }); 
				                winScriptWindow.add(formPopupTextArea);
				                winScriptWindow.show();   
				                /*popupTextArea.getEl().setStyle(
				                		{
				                			fontSize:'22px'
				                        }
				                );*/
			         }
			},
			itemmouseenter: function(view, record, item) {
				if(errorXmlObject !=null){
	  				var gridRowid = record.get( 'EF_ROW_ID' );
	  				for (var i = 0; i < sferrorStore.getCount(); i++) {
	  					var errRowId=sferrorStore.getAt(i).get( 'ef_row_id');
	  					if(gridRowid == errRowId){
	  						 Ext.fly(item).set({'data-qtip': 'Error: ' + sferrorStore.getAt(i).get('ef_err_msg')});
	  					}
	  				}
		        } 
	           
	        },
			afterrender : function( grid, eOpts ){
				 dynamicGrid = grid;
				 if(conn_name != ''){
				    Ext.Ajax.request({
		            	url:'sfconfiguration?req=getSFConectionDetails&conname='+conn_name,//'sfconfiguration?req=getDefaultSFConnection',
			            success:    function(result,request) {
			            	 var resp=result.responseText.trim();
			            	 if(resp == '' || resp == null || resp =='null' || resp == undefined){
			            		 Ext.MessageBox.alert('Error ',"Connection with name "+conn_name+" not found");
			            	  }
			            	 else if(resp.includes('Error')){
			            		 msgTextArea.setFieldStyle('color:red');
			            		 msgTextArea.setValue(resp);
			            	 }
			            	  else{
			            		msgTextArea.setFieldStyle('color:black');
			            		var response=resp.split(',')
			            	   
				      	     user_name=response[1];
				      	     url=response[0];
				      	     role=response[2];
				      	     selectedWH=response[3];
			         		 connectionNameCombo.setValue(conn_name);
			         		 connectionNameCombo.setRawValue(conn_name);
			         		
			         		Ext.getCmp('sf_url').update('<a href="https://'+url+'" target=_blank class="sf_url_style">'+ url +'</a>');
			         		Ext.getCmp('sf_user').update(user_name);
			         		Ext.getCmp('sf_role').update('<font style="font-weight:bold;font-size:11px;">'+role+'</font>');
			         		Ext.suspendLayouts();
			         	    Ext.resumeLayouts(true);
			         	   if(selectedWH != null && selectedWH !='null' && selectedWH != undefined && selectedWH != ''){
			         		    enableDisableBtn(true);
						    	SFWHDS.add({whName : selectedWH});
						    	whCombo.setValue(selectedWH);
						    	whCombo.setRawValue(selectedWH);
						    	dbDS.load();	
						    	isDefaultWHSet=true;
						    }
						    else{
							    Ext.MessageBox.alert('Please select a warehouse');
							    enableDisableBtn(false);
							    isDefaultWHSet=false;
						     }
			               }
						 
			               /* var resp=result.responseText.trim();
			            	 if(resp == '' || resp == null || resp =='null' || resp == undefined){
			            		    Ext.MessageBox.alert('Please create a snowflake connection');
								    enableDisableBtn(false);
								    isDefaultWHSet=false;
			            	  }
			            	 else if(resp.includes('Error')){
			            		 msgTextArea.setFieldStyle('color:red');
			            		 msgTextArea.setValue(resp);
			            	 }
			            	 else{
			            		 var response=resp.split(',');
			            		 conn_name=response[0];
					      	     url=response[1];
					      	     user_name=response[2];
					      	     role=response[3];
					      	     selectedWH=response[4];
					      	     
					      	     SFConnectionNameDS.add({connectionName : conn_name});
								 connectionNameCombo.setValue(conn_name);
								 connectionNameCombo.setRawValue(conn_name);
								 Ext.suspendLayouts();
							     Ext.resumeLayouts(true);
							     
							     Ext.getCmp('sf_url').update('<a href="https://'+url+'" target=_blank class="sf_url_style">'+ url +'</a>');
					         	 Ext.getCmp('sf_user').update(user_name);
					         	 Ext.getCmp('sf_role').update('<font style="font-weight:bold;font-size:11px;">'+role+'</font>');
							     
							     if(selectedWH != null && selectedWH !='null' && selectedWH != undefined && selectedWH != ''){
								    	SFWHDS.add({whName : selectedWH});
								    	whCombo.setValue(selectedWH);
								    	whCombo.setRawValue(selectedWH);
								    	dbDS.load();	
										isDefaultWHSet=true;
								  }
								  else{
									    Ext.MessageBox.alert('Please select a warehouse');
									    enableDisableBtn(false);
									    isDefaultWHSet=false;
								  }
			            	 }*/
		                }
				    });   
			     }
		     }
		}
	});
	 
	//timer
	   var task={
			 run: saveModifiedRecords,
			 interval:parseInt(autoSaveInterval)*(60*1000)
	    };
	   runner.start(task);
	 /*try{
		 autoSaveInterval=autoSaveIntervalBox.getValue();
		 if(autoSaveInterval == null || autoSaveInterval =='null' || autoSaveInterval == undefined || autoSaveInterval == ''){
			 autoSaveInterval=5;
		  }
		
		 
	 }
	 catch(e){
		 console.log('timer error is '+e.message)
	 }*/
	 //timer function
	 function saveModifiedRecords(){
		 if(enableAutoSave){
			 autoSaveInterval=autoSaveIntervalBox.getValue();
			 console.log('in timer autoSaveInterval'+autoSaveInterval)
			 if(autoSaveInterval == null || autoSaveInterval =='null' || autoSaveInterval == undefined || autoSaveInterval == ''){
				 autoSaveInterval=5;
				 autoSaveIntervalBox.setValue(autoSaveInterval);
			  }
	    	 var changes = new Array();
	    	 dynamicCellEdit.cancelEdit();
	         var modifiedRecords =dynamicStore.getModifiedRecords(); 
	         if (modifiedRecords.length == 0) {
	        	    console.log('no chnages to save')
	             }
	         else{
	        	 for ( var i = 0 ; i < modifiedRecords.length ; i++ ) {	   
	               changes.push(modifiedRecords[i].data); 
	              }
	        	 submitChanges(changes ,"update",false); 
	          }
		}
		 else{
			 console.log('auto save disabled')
		 }
	 }
	 
	 
	 function showUploadWindow(action){
	   if(uploadFormWindow == null){
		  uploadForm = Ext.create('Ext.form.FormPanel',{ 
			    baseCls:'x-plain',
				method: "post",
		       	width: 330,
				items: [
					Ext.create('Ext.form.field.File',{
						id: 'xcell_upload',
						labelWidth:90,
						anchor:'100%',
						fieldLabel: 'Choose a file<font color=red>*</font>',
						allowBlank:true,
						blankText:'Choose a file',
						name: 'xcell_upload',
						clearOnSubmit : false,
						buttonCfg: {
						   text: 'Browse'
						}
			       })
			]
		 });
		  uploadFormWindow = Ext.create('Ext.window.Window',{
		        title: 'Load Data',
		        width: 350,
		        autoHeight:true,
		        layout: 'fit',
		        plain:true,
		        closable:true,
		        closeAction : 'hide',
				modal:true,
				minimizable: false,
				resizable:false,
		        bodyStyle:'padding:5px;',
		        buttonAlign:'center',
		        items: uploadForm,
		        buttons: [
		        {
	            text: 'Cancel',
	            handler: function(){
	            	msgTextArea.setValue('');  
 				    uploadForm.getForm().reset();
	            	uploadFormWindow.hide();
		         }      
		        },
				{
	            text: 'Upload',
	            handler: function(){
	            	uploadExcelToServer(action,"N");
	            }
             }],
             listeners : {
      			beforehide : function(){	
      				    msgTextArea.setValue('');  
      				    Ext.getCmp('xcell_upload').setRawValue("");
			            excellActionCombo.setValue('');
						excellActionCombo.setRawValue('');
      				    uploadForm.getForm().reset();
      		    },
      			hide:function(win,e){
      				try{	  		
      					uploadFormWindow.hide();
      		 		}
      				catch(err){
      		 			uploadFormWindow.hide();
      		 		}
      			}
               }
         });
	    }
		 uploadFormWindow.show();
     }
	  function uploadExcelToServer(action,overwrite){
			var fileName = Ext.getCmp('xcell_upload').value;
			if(fileName == '' || fileName == undefined){
				Ext.MessageBox.alert('Error',"Please select a file"); 
				return;
			}
			else{
			var fileExtension = '';
			var requestURL='';
			var extension1='xls';
			var extension2='xlsx';
			var extension3='csv';
			try {
				if (fileName.lastIndexOf('\\') !=-1) {
				   var firstpos=fileName.lastIndexOf('\\')+1;
		           var fName =  fileName.slice(firstpos,fileName.length);
				   fileExtension = fName.slice(fName.lastIndexOf(".")+1,fName.length);
		        } else {
		           fileExtension = fileName.slice(fileName.lastIndexOf(".")+1,fileName.length);
		        }
			} catch(e){
			}
			//:tableName,fields:columnsfields.join()
			if(fileExtension.toLowerCase()=='xls' ||  fileExtension.toLowerCase()=='xlsx' ||  fileExtension.toLowerCase()=='csv') {
				  myMask = new Ext.LoadMask({
		                 msg    : 'Please wait...',
		                 target : uploadFormWindow
		              });
		          myMask.show();
				if(fileExtension.toLowerCase()=='xls'){
			        requestURL='sfimportupload?req=uploadExcell&extension='+extension1;
		    	}
		    	else if(fileExtension.toLowerCase()=='xlsx'){
		    		requestURL='sfimportupload?req=uploadExcell&extension='+extension2;
		    	}
		    	else if(fileExtension.toLowerCase()=='csv'){
		    		requestURL='sfimportupload?req=uploadExcell&extension='+extension3;
		    	}
				uploadForm.getForm().enctype = uploadForm.getForm().encoding = 'application/x-www-form-urlencoded';
				var url= requestURL+'&tblName='+tableName+'&fields='+columnsfields.join()+'&dbName='+sf_db_name+'&schema='+selectedSchema+'&wh='+selectedWH
				+'&overwrite='+overwrite;
				uploadForm.getForm().submit({ 
					url:url,
					isUpload: true,
					reset:false,
					success: function(result,response){
						 myMask.hide();
						 var resp=response.result.msg.trim();
						 if(action =='LOAD_CSV'){
							 if(resp.includes('SessionExpired')){
			        	    	 window.location.href="login";
			        	     }
			            	 else{
			            		if(resp.includes("File already")){
			            			Ext.Msg.show({
			        				    title:'Alert',
			        	   				msg: resp+', Do you want to overwrite this?',
			        	   				buttons: Ext.MessageBox.YESNO,   
			        						fn: function(btn,val){ 
			        							if(btn =='yes'){
			        								uploadExcelToServer(action,"Y");
			        			                }
			        							else{
			        								uploadFormWindow.hide();
			        							}
			        			   		},
			        			   		animEl: 'elId'
			        				});
			            		}
			            		else
			            		  Ext.MessageBox.alert('Status',resp); 
		            		 }
						 }
						 else{
							 if(resp.includes('SessionExpired')){
			        	    	 window.location.href="login";
			        	     }
			            	 else if(resp.includes('Error')){
			            		Ext.MessageBox.alert('Error',resp.split('@')[2]); 
		            		 }
			            	 else{
					            var message=resp.split('@');
					            Ext.MessageBox.alert('Response',message[0] +" " +message[1]); 
					            uploadFormWindow.hide();
					            dynamicStore.load();
					            excellActionCombo.setValue('');
								excellActionCombo.setRawValue('');
			            	}
					   }
				     },
					 failure: function(res,req){
						console.log('in fail');
						myMask.hide();
					 }
				});
		  } else {
		    Ext.MessageBox.alert('Error','Invalid file format. Please choose a excel file.'); 
		    uploadForm.getForm().reset();
		  }
	   }
	}
	 function clearErrorGridAndStore(){
		    errorXmlObject=null;
			if(sferrorStore != null && sferrorStore != undefined){
				  sferrorStore.removeAll();
				  sferrorStore=null
			}
	 }
	//enable/disable toolbar button
	function enableDisableBtn(makeEnable){
		if(makeEnable){
			searchBox.setDisabled(false);
		    columnCombo.setDisabled(false);
		    schemaCombo.setDisabled(false);
		    dbCombo.setDisabled(false);
		    fromField.setDisabled(false);
		    toField.setDisabled(false);
		    Ext.getCmp('save').setDisabled(false);
		    Ext.getCmp('update').setDisabled(false);
		    Ext.getCmp('discard').setDisabled(false);
		    Ext.getCmp('filterquery').setDisabled(false);
		    Ext.getCmp('search').setDisabled(false);
		    
		    Ext.getCmp('auto-save').setDisabled(false);
		    Ext.getCmp('edit-pop-up').setDisabled(false);
		    autoSaveIntervalBox.setDisabled(false);
		}
		else{
			searchBox.setDisabled(true);
		    columnCombo.setDisabled(true);
		    schemaCombo.setDisabled(true);
		    dbCombo.setDisabled(true);
		    fromField.setDisabled(true);
		    toField.setDisabled(true);
		    Ext.getCmp('save').setDisabled(true);
		    Ext.getCmp('update').setDisabled(true);
		    Ext.getCmp('discard').setDisabled(true);
		    Ext.getCmp('filterquery').setDisabled(true);
		    Ext.getCmp('search').setDisabled(true);
		    
		    Ext.getCmp('auto-save').setDisabled(true);
		    Ext.getCmp('edit-pop-up').setDisabled(true);
		    autoSaveIntervalBox.setDisabled(true);
		}
	}
});